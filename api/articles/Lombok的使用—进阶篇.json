{"title":"Lombok的使用一进阶篇","uid":"6a8b4d4d5ad2121dc1df69e7c613a802","slug":"Lombok的使用—进阶篇","date":"2022-05-25T15:30:06.000Z","updated":"2022-05-31T12:04:36.553Z","comments":true,"path":"api/articles/Lombok的使用—进阶篇.json","keywords":null,"cover":"/logo/Lombok的使用进阶篇.jpg","content":"<h2 id=\"进阶注解解析\">进阶注解解析</h2>\n<h3 id=\"SuperBuilder-实验性功能\">@SuperBuilder(实验性功能)</h3>\n<p>是一个帮助类生成复杂的构建器 API。将循允许我们使用以下的方式去实例化对象，但是对继承的类的属性不会忽略,但是超类也必须使用此注解。<br>\n使用方式可参照<code>@Builder</code></p>\n<h3 id=\"Jacksonized-实验性功能\">@Jacksonized(实验性功能)</h3>\n<p>此注解是<code>@Builder</code>和<code>@SuperBuilder</code>的附加注解,允许他们<code>Jackson</code>序列化/反序列化不被报错</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Jacksonized @Builder\n@JsonIgnoreProperties(ignoreUnknown &#x3D; true)\npublic class JacksonExample &#123;\n\tprivate List&lt;Foo&gt; foos;\n&#125;</code></pre>\n<h3 id=\"Accessors-实验性功能\">@Accessors(实验性功能)</h3>\n<p>使用此注解允许使用以下的链式方式调用方法,注解的<code>fluent</code>熟悉默认为<code>false</code>,设置为<code>true</code>时,则<code>getter</code>/<code>setter</code>方法，没有<code>get</code>/<code>set</code>前缀。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">User user &#x3D; new User().age(31).name(&quot;pollyduan&quot;);</code></pre>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.experimental.Accessors;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Accessors(fluent &#x3D; true)\npublic class AccessorsExample &#123;\n  @Getter @Setter\n  private int age &#x3D; 10;\n&#125;\n\nclass PrefixExample &#123;\n  @Accessors(prefix &#x3D; &quot;f&quot;) @Getter\n  private String fName &#x3D; &quot;Hello, World!&quot;;\n&#125;</code></pre>\n<p>编译后的实体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AccessorsExample &#123;\n  private int age &#x3D; 10;\n  \n  public int age() &#123;\n    return this.age;\n  &#125;\n  \n  public AccessorsExample age(final int age) &#123;\n    this.age &#x3D; age;\n    return this;\n  &#125;\n&#125;\n\nclass PrefixExample &#123;\n  private String fName &#x3D; &quot;Hello, World!&quot;;\n  \n  public String getName() &#123;\n    return this.fName;\n  &#125;\n&#125;</code></pre>\n<h3 id=\"var关键字\">var关键字</h3>\n<p><code>var</code>替换掉了原来的<code>val</code>。<code>var</code>关键字可以让我们在定义一个变量时候不需要提前指定它的类型，它的实际的类型将由初始化的表达式推断,<code>var</code>声明的变量是非<code>final</code>的,而<code>val</code>声明的变量是<code>final</code>的。若要使用<code>var</code>声明<code>final</code></p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">var example &#x3D; new ArrayList&lt;String&gt;();\nexample.add(&quot;welcome to hangge.com&quot;);</code></pre>","text":"进阶注解解析 @SuperBuilder(实验性功能) 是一个帮助类生成复杂的构建器 API。将循允许我们使用以下的方式去实例化对象，但是对继承的类的属性不会忽略,但是超类也必须使用此注解。 使用方式可参照@Builder @Jacksonized(实验性功能) 此注解是@Bui...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E9%98%B6%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">进阶注解解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SuperBuilder-%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">@SuperBuilder(实验性功能)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jacksonized-%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">@Jacksonized(实验性功能)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Accessors-%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">@Accessors(实验性功能)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#var%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">var关键字</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{"title":"Java函数式编程","uid":"2b987db277ec8f53b5baaa150ea429a6","slug":"Java函数式编程","date":"2022-05-31T13:30:06.000Z","updated":"2022-06-07T13:07:33.283Z","comments":true,"path":"api/articles/Java函数式编程.json","keywords":null,"cover":null,"text":"引言 什么是函数式编程，即可以把方法当做参数或者返回值传递或引用。在JavaScript中函数式编程已经很常见，但是Java Function是不能作为参数引用，为此Java 8中提出了三个概念 Lambda 表达式，也可以称为闭包，但我更愿意称为定义函数的简写表达式 方法引用，...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"函数式编程","slug":"java/函数式编程","count":1,"path":"api/categories/java/函数式编程.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}}},"next_post":{"title":"Lombok的使用一基础篇","uid":"ad1f662ab87a679b9b7a6abe69e2649c","slug":"Lombok的使用一基础篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T13:51:43.747Z","comments":true,"path":"api/articles/Lombok的使用一基础篇.json","keywords":null,"cover":"/logo/ba41a32b219e4b40ad055bbb52935896.jpg","text":"序言 Lombok是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码 常用注解解析 @Data @Data是一个快捷注解，包含@Getter,@Setter,@ToString,@EqualsAndHashCode and ...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}}}}