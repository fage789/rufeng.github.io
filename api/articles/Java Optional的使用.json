{"title":"Java Optional的使用","uid":"135ff637d6fd3260ea45b1df53f84b3e","slug":"Java Optional的使用","date":"2022-06-08T06:30:06.000Z","updated":"2022-06-08T06:58:05.596Z","comments":true,"path":"api/articles/Java Optional的使用.json","keywords":null,"cover":null,"content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）。</p>\n<p>以前我们<br><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String getGender(Student student)&#123;\n    if(null &#x3D;&#x3D; student)&#123;\n        return &quot;Unkown&quot;;\n    &#125;\n    return student.getGender();   \n&#125;</code></pre></p>\n<p>现在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String getGender(Student student)&#123;\n    \n    return Optional.ofNullable(student)   &#x2F;&#x2F; 创建一个student可能为空的Optional\n                .map(u -&gt; u.getGender())  &#x2F;&#x2F; 如果student有值则返回学生的信息\n                .orElse(&quot;Unkown&quot;);        &#x2F;&#x2F; 如果返回值为空则返回&quot;Unkown&quot;\n&#125;</code></pre>\n<h2 id=\"Optional的创建\"><a href=\"#Optional的创建\" class=\"headerlink\" title=\"Optional的创建\"></a>Optional的创建</h2><h3 id=\"声明一个空的Optional\"><a href=\"#声明一个空的Optional\" class=\"headerlink\" title=\"声明一个空的Optional\"></a>声明一个空的Optional</h3><p><code>Optional&lt;Car&gt; optCar = Optional.empty();</code></p>\n<h3 id=\"依据一个非空值创建Optional\"><a href=\"#依据一个非空值创建Optional\" class=\"headerlink\" title=\"依据一个非空值创建Optional\"></a>依据一个非空值创建Optional</h3><p><code>Optional&lt;Car&gt; optCar = Optional.of(car);</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果car是一个null，这段代码会立即抛出一个NullPointerException，而不是等到你<br>试图访问car的属性值时才返回一个错误。</p></blockquote>\n<h3 id=\"可接受null的Optional\"><a href=\"#可接受null的Optional\" class=\"headerlink\" title=\"可接受null的Optional\"></a>可接受null的Optional</h3><p><code>Optional&lt;Car&gt; optCar = Optional.ofNullable(car)</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果car是null，那么得到的Optional对象就是个空对象</p></blockquote>\n<h2 id=\"Optional的方法\"><a href=\"#Optional的方法\" class=\"headerlink\" title=\"Optional的方法\"></a>Optional的方法</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static &lt;T&gt; Optional&lt;T&gt; empty()</code></td>\n<td>返回空的 Optional 实例。</td>\n</tr>\n<tr>\n<td><code>boolean equals(Object obj)</code></td>\n<td>判断其他对象是否等于 Optional。</td>\n</tr>\n<tr>\n<td><code>Optional&lt;T&gt; filter(Predicate&lt;? super &lt;T&gt; predicate)</code></td>\n<td>如果值存在，并且这个值匹配给定的 predicate，返回一个Optional用以描述这个值，否则返回一个空的Optional。</td>\n</tr>\n<tr>\n<td><code>&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code></td>\n<td>如果值存在，返回基于Optional包含的映射方法的值，否则返回一个空的Optional。</td>\n</tr>\n<tr>\n<td><code>T get()</code></td>\n<td>如果在这个Optional中包含这个值，返回值，否则抛出异常：NoSuchElementException</td>\n</tr>\n<tr>\n<td><code>int hashCode()</code></td>\n<td>返回存在值的哈希码，如果值不存在 返回 0。</td>\n</tr>\n<tr>\n<td><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code></td>\n<td>如果值存在则使用该值调用 consumer , 否则不做任何事情。</td>\n</tr>\n<tr>\n<td><code>boolean isPresent()</code></td>\n<td>如果值存在则方法会返回true，否则返回 false。</td>\n</tr>\n<tr>\n<td><code>&lt;U&gt;Optional&lt;U&gt; map(Function&lt;? super T,? extends U&gt; mapper)</code></td>\n<td>如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的Optional作为map方法返回值，否则返回空Optional。</td>\n</tr>\n<tr>\n<td><code>static &lt;T&gt; Optional&lt;T&gt; of(T value)</code></td>\n<td>返回一个指定非null值的Optional。</td>\n</tr>\n<tr>\n<td><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code></td>\n<td>如果为非空，返回 Optional 描述的指定值，否则返回空的 Optional。</td>\n</tr>\n<tr>\n<td><code>T orElse(T other)</code></td>\n<td>如果存在该值，返回值， 否则返回 other。</td>\n</tr>\n<tr>\n<td><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code></td>\n<td>如果存在该值，返回值， 否则触发 other，并返回 other 调用的结果。</td>\n</tr>\n<tr>\n<td><code>&lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code></td>\n<td>如果存在该值，返回包含的值，否则抛出由 Supplier 继承的异常。</td>\n</tr>\n<tr>\n<td><code>String toString()</code></td>\n<td>返回一个Optional的非空字符串，用来调试。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Optional的示例\"><a href=\"#Optional的示例\" class=\"headerlink\" title=\"Optional的示例\"></a>Optional的示例</h2><h3 id=\"从Optional对象中提取和转换值\"><a href=\"#从Optional对象中提取和转换值\" class=\"headerlink\" title=\"从Optional对象中提取和转换值\"></a>从Optional对象中提取和转换值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">person.flatMap(Person::getCar)  &#x2F;&#x2F; 获取员工的汽车对象\n    .flatMap(Car::getInsurance) &#x2F;&#x2F; 获取汽车的保险公司对象\n    .map(Insurance::getName)    &#x2F;&#x2F; 获取保险公司名称\n    .orElse(&quot;Unknown&quot;);         &#x2F;&#x2F; 如果Optional的结果值为空，设置默认值</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不用以前层层判断对象是否为空，再继续执行代码了</p></blockquote>\n<h3 id=\"使用filter剔除特定的值\"><a href=\"#使用filter剔除特定的值\" class=\"headerlink\" title=\"使用filter剔除特定的值\"></a>使用filter剔除特定的值</h3><p>以前<br><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Insurance insurance &#x3D; ...; \nif(insurance !&#x3D; null &amp;&amp; &quot;CambridgeInsurance&quot;.equals(insurance.getName()))&#123; \n    System.out.println(&quot;ok&quot;); \n&#125;</code></pre><br>使用Optional对象的filter方法，这段代码可以重构如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Optional&lt;Insurance&gt; optInsurance &#x3D; ...; \noptInsurance.filter(insurance -&gt; &quot;CambridgeInsurance&quot;.equals(insurance.getName())) &#x2F;&#x2F; 根据条件过滤值\n    .ifPresent(x -&gt; System.out.println(&quot;ok&quot;));                                     &#x2F;&#x2F; 如果值存在则打印输出\n    </code></pre>","feature":true,"text":"引言Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerExc...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"Optional","slug":"java/Optional","count":1,"path":"api/categories/java/Optional.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"Optional","slug":"Optional","count":1,"path":"api/tags/Optional.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Optional%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">Optional的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9A%84Optional\"><span class=\"toc-text\">声明一个空的Optional</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E6%8D%AE%E4%B8%80%E4%B8%AA%E9%9D%9E%E7%A9%BA%E5%80%BC%E5%88%9B%E5%BB%BAOptional\"><span class=\"toc-text\">依据一个非空值创建Optional</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%8E%A5%E5%8F%97null%E7%9A%84Optional\"><span class=\"toc-text\">可接受null的Optional</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Optional%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Optional的方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Optional%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">Optional的示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8EOptional%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%8F%90%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2%E5%80%BC\"><span class=\"toc-text\">从Optional对象中提取和转换值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8filter%E5%89%94%E9%99%A4%E7%89%B9%E5%AE%9A%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">使用filter剔除特定的值</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{"title":"Mysql索引 - 为什么使用B+树","uid":"2c03d9b1a2276865a0e94d2f6eb59bcd","slug":"Mysql索引为什么使用B+树","date":"2022-06-13T08:30:06.000Z","updated":"2022-06-13T10:15:47.276Z","comments":true,"path":"api/articles/Mysql索引为什么使用B+树.json","keywords":null,"cover":[],"text":"引言 通过分析哈希索引、平衡二叉树、B树、B+树来判断Mysql为什么使用B+树。 其中文章中使用的数据结构可视化地址能够更好的帮助大家了解这四种索引方式。 哈希索引 通过哈希算法计算值的键,以键值对的方式存储数据。 可以看到插入了{0,1,2,3,4,55},而{3，55}的哈...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/categories/Mysql.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true},"next_post":{"title":"Java文档注释","uid":"c89fcf3f80f5323c4d2b7488e0aabc7d","slug":"Java文档注释","date":"2022-06-07T10:30:06.000Z","updated":"2022-06-08T06:06:51.600Z","comments":true,"path":"api/articles/Java文档注释.json","keywords":null,"cover":null,"text":"引言Java 支持三种注释方式。前两种分别是 // 和 /* */，第三种被称作说明注释，它以 /** 开始，以 */结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"注释","slug":"java/注释","count":1,"path":"api/categories/java/注释.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"注释","slug":"注释","count":1,"path":"api/tags/注释.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true}}