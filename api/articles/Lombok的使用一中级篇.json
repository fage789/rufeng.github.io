{"title":"Lombok的使用一中级篇","uid":"f4f9a107b18653850d81e048925a42ea","slug":"Lombok的使用一中级篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T14:11:18.805Z","comments":true,"path":"api/articles/Lombok的使用一中级篇.json","keywords":null,"cover":"/logo/bab9141327ca48e39abef6229b79cf9c.jpg","content":"<h2 id=\"高级注解解析\"><a href=\"#高级注解解析\" class=\"headerlink\" title=\"高级注解解析\"></a>高级注解解析</h2><h3 id=\"Builder\"><a href=\"#Builder\" class=\"headerlink\" title=\"@Builder\"></a>@Builder</h3><p>是一个帮助类生成复杂的构建器 API。将允许我们使用以下的方式去实例化对象，但是对继承的类的属性会忽略。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Person.builder()\n   .name(&quot;Adam Savage&quot;)\n   .city(&quot;San Francisco&quot;)\n   .job(&quot;Mythbusters&quot;)\n   .job(&quot;Unchained Reaction&quot;)\n  .build();</code></pre>\n<p>当你想为某一字段使用默认值时，使用<code>@Builder.Default</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Builder.Default \nprivate long created &#x3D; System.currentTimeMillis()</code></pre>\n<p>当某个字段为集合类型时，使用<code>@Singular</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Singular \nprivate Set&lt;String&gt; occupations;</code></pre>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\nimport lombok.Builder;\nimport lombok.Singular;\nimport java.util.Set;\n\n@Builder\npublic class BuilderExample &#123;\n  @Builder.Default private long created &#x3D; System.currentTimeMillis();\n  private String name;\n  private int age;\n  @Singular private Set&lt;String&gt; occupations;\n&#125;</code></pre>\n\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Set;\n\npublic class BuilderExample &#123;\n  private long created;\n  private String name;\n  private int age;\n  private Set&lt;String&gt; occupations;\n  \n  BuilderExample(String name, int age, Set&lt;String&gt; occupations) &#123;\n    this.name &#x3D; name;\n    this.age &#x3D; age;\n    this.occupations &#x3D; occupations;\n  &#125;\n  \n  private static long $default$created() &#123;\n    return System.currentTimeMillis();\n  &#125;\n  \n  public static BuilderExampleBuilder builder() &#123;\n    return new BuilderExampleBuilder();\n  &#125;\n  \n  public static class BuilderExampleBuilder &#123;\n    private long created;\n    private boolean created$set;\n    private String name;\n    private int age;\n    private java.util.ArrayList&lt;String&gt; occupations;\n    \n    BuilderExampleBuilder() &#123;\n    &#125;\n    \n    public BuilderExampleBuilder created(long created) &#123;\n      this.created &#x3D; created;\n      this.created$set &#x3D; true;\n      return this;\n    &#125;\n    \n    public BuilderExampleBuilder name(String name) &#123;\n      this.name &#x3D; name;\n      return this;\n    &#125;\n    \n    public BuilderExampleBuilder age(int age) &#123;\n      this.age &#x3D; age;\n      return this;\n    &#125;\n    \n    public BuilderExampleBuilder occupation(String occupation) &#123;\n      if (this.occupations &#x3D;&#x3D; null) &#123;\n        this.occupations &#x3D; new java.util.ArrayList&lt;String&gt;();\n      &#125;\n      \n      this.occupations.add(occupation);\n      return this;\n    &#125;\n    \n    public BuilderExampleBuilder occupations(Collection&lt;? extends String&gt; occupations) &#123;\n      if (this.occupations &#x3D;&#x3D; null) &#123;\n        this.occupations &#x3D; new java.util.ArrayList&lt;String&gt;();\n      &#125;\n\n      this.occupations.addAll(occupations);\n      return this;\n    &#125;\n    \n    public BuilderExampleBuilder clearOccupations() &#123;\n      if (this.occupations !&#x3D; null) &#123;\n        this.occupations.clear();\n      &#125;\n      \n      return this;\n    &#125;\n\n    public BuilderExample build() &#123;\n      &#x2F;&#x2F; complicated switch statement to produce a compact properly sized immutable set omitted.\n      Set&lt;String&gt; occupations &#x3D; ...;\n      return new BuilderExample(created$set ? created : BuilderExample.$default$created(), name, age, occupations);\n    &#125;\n    \n    @java.lang.Override\n    public String toString() &#123;\n      return &quot;BuilderExample.BuilderExampleBuilder(created &#x3D; &quot; + this.created + &quot;, name &#x3D; &quot; + this.name + &quot;, age &#x3D; &quot; + this.age + &quot;, occupations &#x3D; &quot; + this.occupations + &quot;)&quot;;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"SneakyThrows-慎用\"><a href=\"#SneakyThrows-慎用\" class=\"headerlink\" title=\"@SneakyThrows(慎用)\"></a>@SneakyThrows(慎用)</h3><p>可以用来偷偷抛出检查异常，而无需在方法的<code>throws</code>子句中实际声明它。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.SneakyThrows;\n\npublic class SneakyThrowsExample implements Runnable &#123;\n  @SneakyThrows(UnsupportedEncodingException.class)\n  public String utf8ToString(byte[] bytes) &#123;\n    return new String(bytes, &quot;UTF-8&quot;);\n  &#125;\n  \n  @SneakyThrows\n  public void run() &#123;\n    throw new Throwable();\n  &#125;\n&#125;</code></pre>\n\n<p>编译后的实体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Lombok;\n\npublic class SneakyThrowsExample implements Runnable &#123;\n  public String utf8ToString(byte[] bytes) &#123;\n    try &#123;\n      return new String(bytes, &quot;UTF-8&quot;);\n    &#125; catch (UnsupportedEncodingException e) &#123;\n      throw Lombok.sneakyThrow(e);\n    &#125;\n  &#125;\n  \n  public void run() &#123;\n    try &#123;\n      throw new Throwable();\n    &#125; catch (Throwable t) &#123;\n      throw Lombok.sneakyThrow(t);\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"Synchronized-慎用\"><a href=\"#Synchronized-慎用\" class=\"headerlink\" title=\"@Synchronized(慎用)\"></a>@Synchronized(慎用)</h3><p>此注解是<code>synchronized</code>方法修饰符的一个更安全的变体。就像<code>synchronized</code>，注解只能用于静态和实例方法。它的操作类似于<code>synchronized</code>关键字，但它锁定不同的对象。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Synchronized;\n\npublic class SynchronizedExample &#123;\n  private final Object readLock &#x3D; new Object();\n  \n  @Synchronized\n  public static void hello() &#123;\n    System.out.println(&quot;world&quot;);\n  &#125;\n  \n  @Synchronized\n  public int answerToLife() &#123;\n    return 42;\n  &#125;\n  \n  @Synchronized(&quot;readLock&quot;)\n  public void foo() &#123;\n    System.out.println(&quot;bar&quot;);\n  &#125;\n&#125;</code></pre>\n\n<p>编译后的实体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class SynchronizedExample &#123;\n  private static final Object $LOCK &#x3D; new Object[0];\n  private final Object $lock &#x3D; new Object[0];\n  private final Object readLock &#x3D; new Object();\n  \n  public static void hello() &#123;\n    synchronized($LOCK) &#123;\n      System.out.println(&quot;world&quot;);\n    &#125;\n  &#125;\n  \n  public int answerToLife() &#123;\n    synchronized($lock) &#123;\n      return 42;\n    &#125;\n  &#125;\n  \n  public void foo() &#123;\n    synchronized(readLock) &#123;\n      System.out.println(&quot;bar&quot;);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"With\"><a href=\"#With\" class=\"headerlink\" title=\"@With\"></a>@With</h3><p>当你需要克隆对象，修改一个值而保留其他值不变时，则使用此注解。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.AccessLevel;\nimport lombok.NonNull;\nimport lombok.With;\n\npublic class WithExample &#123;\n  @With(AccessLevel.PROTECTED) @NonNull private final String name;\n  @With private final int age;\n  \n  public WithExample(@NonNull String name, int age) &#123;\n    this.name &#x3D; name;\n    this.age &#x3D; age;\n  &#125;\n&#125;</code></pre>\n\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.NonNull;\n\npublic class WithExample &#123;\n  private @NonNull final String name;\n  private final int age;\n\n  public WithExample(String name, int age) &#123;\n    if (name &#x3D;&#x3D; null) throw new NullPointerException();\n    this.name &#x3D; name;\n    this.age &#x3D; age;\n  &#125;\n\n  protected WithExample withName(@NonNull String name) &#123;\n    if (name &#x3D;&#x3D; null) throw new java.lang.NullPointerException(&quot;name&quot;);\n    return this.name &#x3D;&#x3D; name ? this : new WithExample(name, age);\n  &#125;\n\n  public WithExample withAge(int age) &#123;\n    return this.age &#x3D;&#x3D; age ? this : new WithExample(name, age);\n  &#125;\n&#125;</code></pre>\n<h3 id=\"Getter-lazy-x3D-true\"><a href=\"#Getter-lazy-x3D-true\" class=\"headerlink\" title=\"@Getter(lazy&#x3D;true)\"></a>@Getter(lazy&#x3D;true)</h3><p>标注字段为懒加载字段，懒加载字段在创建对象时不会进行初始化，而是在第一次访问的时候才会初始化，后面再次访问也不会重复初始化。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Getter;\n\npublic class GetterLazyExample &#123;\n  @Getter(lazy&#x3D;true) private final double[] cached &#x3D; expensive();\n  \n  private double[] expensive() &#123;\n    double[] result &#x3D; new double[1000000];\n    for (int i &#x3D; 0; i &lt; result.length; i++) &#123;\n      result[i] &#x3D; Math.asin(i);\n    &#125;\n    return result;\n  &#125;\n&#125;</code></pre>\n\n<p>编译后的实体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class GetterLazyExample &#123;\n  private final java.util.concurrent.AtomicReference&lt;java.lang.Object&gt; cached &#x3D; new java.util.concurrent.AtomicReference&lt;java.lang.Object&gt;();\n  \n  public double[] getCached() &#123;\n    java.lang.Object value &#x3D; this.cached.get();\n    if (value &#x3D;&#x3D; null) &#123;\n      synchronized(this.cached) &#123;\n        value &#x3D; this.cached.get();\n        if (value &#x3D;&#x3D; null) &#123;\n          final double[] actualValue &#x3D; expensive();\n          value &#x3D; actualValue &#x3D;&#x3D; null ? this.cached : actualValue;\n          this.cached.set(value);\n        &#125;\n      &#125;\n    &#125;\n    return (double[])(value &#x3D;&#x3D; this.cached ? null : value);\n  &#125;\n  \n  private double[] expensive() &#123;\n    double[] result &#x3D; new double[1000000];\n    for (int i &#x3D; 0; i &lt; result.length; i++) &#123;\n      result[i] &#x3D; Math.asin(i);\n    &#125;\n    return result;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"Cleanup\"><a href=\"#Cleanup\" class=\"headerlink\" title=\"@Cleanup\"></a>@Cleanup</h3><p>主要用来修饰 IO 流相关类, 会在 <code>finally</code> 代码块中对该资源进行 <code>close()</code>;</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Cleanup;\nimport java.io.*;\n\npublic class CleanupExample &#123;\n  public static void main(String[] args) throws IOException &#123;\n    @Cleanup InputStream in &#x3D; new FileInputStream(args[0]);\n    @Cleanup OutputStream out &#x3D; new FileOutputStream(args[1]);\n    byte[] b &#x3D; new byte[10000];\n    while (true) &#123;\n      int r &#x3D; in.read(b);\n      if (r &#x3D;&#x3D; -1) break;\n      out.write(b, 0, r);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>编译后的实体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.io.*;\n\npublic class CleanupExample &#123;\n  public static void main(String[] args) throws IOException &#123;\n    InputStream in &#x3D; new FileInputStream(args[0]);\n    try &#123;\n      OutputStream out &#x3D; new FileOutputStream(args[1]);\n      try &#123;\n        byte[] b &#x3D; new byte[10000];\n        while (true) &#123;\n          int r &#x3D; in.read(b);\n          if (r &#x3D;&#x3D; -1) break;\n          out.write(b, 0, r);\n        &#125;\n      &#125; finally &#123;\n        if (out !&#x3D; null) &#123;\n          out.close();\n        &#125;\n      &#125;\n    &#125; finally &#123;\n      if (in !&#x3D; null) &#123;\n        in.close();\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n","feature":true,"text":"高级注解解析@Builder是一个帮助类生成复杂的构建器 API。将允许我们使用以下的方式去实例化对象，但是对继承的类的属性会忽略。 Person.builder() .name(&quot;Adam Savage&quot;) .city(&quot;San Francisco...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">高级注解解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Builder\"><span class=\"toc-text\">@Builder</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SneakyThrows-%E6%85%8E%E7%94%A8\"><span class=\"toc-text\">@SneakyThrows(慎用)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Synchronized-%E6%85%8E%E7%94%A8\"><span class=\"toc-text\">@Synchronized(慎用)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#With\"><span class=\"toc-text\">@With</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Getter-lazy-x3D-true\"><span class=\"toc-text\">@Getter(lazy&#x3D;true)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cleanup\"><span class=\"toc-text\">@Cleanup</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{"title":"Lombok的使用一进阶篇","uid":"6a8b4d4d5ad2121dc1df69e7c613a802","slug":"Lombok的使用—进阶篇","date":"2022-05-25T15:30:06.000Z","updated":"2022-05-25T14:34:28.501Z","comments":true,"path":"api/articles/Lombok的使用—进阶篇.json","keywords":null,"cover":"/logo/Lombok的使用进阶篇.jpg","text":"进阶注解解析@SuperBuilder(实验性功能)是一个帮助类生成复杂的构建器 API。将循允许我们使用以下的方式去实例化对象，但是对继承的类的属性不会忽略,但是超类也必须使用此注解 @Jacksonized(实验性功能)此注解是@Builder和@SuperBuilder的附...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true},"next_post":{"title":"Lombok的使用一基础篇","uid":"ad1f662ab87a679b9b7a6abe69e2649c","slug":"Lombok的使用一基础篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T13:51:43.747Z","comments":true,"path":"api/articles/Lombok的使用一基础篇.json","keywords":null,"cover":"/logo/ba41a32b219e4b40ad055bbb52935896.jpg","text":"序言Lombok是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码 常用注解解析@Data@Data是一个快捷注解，包含@Getter,@Setter,@ToString,@EqualsAndHashCode and @Re...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true}}