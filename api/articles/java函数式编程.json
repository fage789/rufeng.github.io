{"title":"Java函数式编程","uid":"2b987db277ec8f53b5baaa150ea429a6","slug":"java函数式编程","date":"2022-05-31T13:30:06.000Z","updated":"2022-06-06T09:00:36.855Z","comments":true,"path":"api/articles/java函数式编程.json","keywords":null,"cover":null,"content":"<h2 id=\"引言\">引言</h2>\n<p>什么是函数式编程，即可以把方法当做参数或者返回值传递或引用。在JavaScript中函数式编程已经很常见，但是Java Function是不能作为参数引用，为此Java 8中提出了三个概念</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>Lambda 表达式，也可以称为闭包，但我更愿意称为定义函数的简写表达式</li>\n<li>方法引用，可以直接引用已有Java类或对象（实例）的方法或构造器</li>\n<li>函数式接口，一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口</li>\n</ol></blockquote>\n<h2 id=\"Lambda-表达式\">Lambda 表达式</h2>\n<p>java8之前函数的引用方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Arrays.sort(array, new Comparator&lt;String&gt;() {\n    public int compare(String s1, String s2) {\n        return s1.compareTo(s2);\n    }\n});</code></pre>\n<p>上述写法非常繁琐，从java8开始，我们可以使用Lambda表达式写。可以看出Lambda表达式是函数定义的简写方式，不用声明匿名类，JVM会自己帮我们做。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Arrays.sort(array, (String s1, String s2) -&gt; {\n    return s1.compareTo(s2);\n});</code></pre>\n<h3 id=\"Lambda表达式的基本语法\">Lambda表达式的基本语法</h3>\n<p><code>(parameters) -&gt;{ statements; }</code></p>\n<p>Lambda的两个省略</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>当箭头左边只有一个参数时,可省略<code>()</code><br>\n<code>a =&gt; {return a + 1;}</code></li>\n<li>当箭头右边只有一句话时,可省略<code>{}</code>与<code>return</code><br>\n<code>(a, b) =&gt; a + b;</code></li>\n</ol></blockquote>\n<h3 id=\"变量作用域\">变量作用域</h3>\n<ul>\n<li><code>Lambda</code>表达式只能引用标记了<code>final</code>的外层局部变量，这就是说不能在<code>Lambda</code>内部修改定义在域外的局部变量，否则会编译错误</li>\n<li><code>Lambda</code>表达式的局部变量可以不用声明为<code>final</code>，但是必须不可被后面的代码修改(即隐性的具有<code>final</code>的语义)</li>\n<li>在<code>Lambda</code>表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String first = \"\";  \nComparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  // 编译会出错 </code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int num = 1;  \nConverter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));\ns.convert(2);\nnum = 5;  \n// 报错信息：Local variable num defined in an enclosing scope must be final or effectively final</code></pre>\n<h2 id=\"方法引用\">方法引用</h2>\n<p>方法引用通过方法的名字来指向一个方法，可以使语音的构造更加紧凑，减少冗余代码，方法引用使用一对冒号。<br>\n对于Arrays.sort方法,第二个参数Comparator是一个单方法接口，除了可以传入Lambda表达式，我们还可以直接传入符合要求的方法引<code>Arrays.sort(array, String::compareTo);</code></p>\n<h3 id=\"方法引用的基本语法\">方法引用的基本语法</h3>\n<h4 id=\"构造器的引用\">构造器的引用</h4>\n<p>语法： <code>Class::new</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final Car car = Car.create( Car::new );\nfinal List&lt; Car &gt; cars = Arrays.asList( car );</code></pre>\n<h4 id=\"静态方法的引用\">静态方法的引用</h4>\n<p>语法： <code>Class::static_method</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">cars.forEach( Car::collide );</code></pre>\n<h4 id=\"特定类的任意对象的方法引用\">特定类的任意对象的方法引用</h4>\n<p>语法： <code>Class::method</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">cars.forEach( Car::repair );</code></pre>\n<h4 id=\"特定对象的方法引用\">特定对象的方法引用</h4>\n<p>语法： <code>instance::method</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final Car police = Car.create( Car::new );\ncars.forEach( police::follow );</code></pre>\n<h2 id=\"函数式接口\">函数式接口</h2>\n<p>Lambda表达式、方法引用只是针对方法的简写与特殊方法引用的简写。那我们该如何将更加复杂的函数传递和引用呢？<br>\n那如何先声明一个可被传递或者引用的函数呢？使用@FunctionalInterface注解创建一个函数式接口即可</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@FunctionalInterface\ninterface Functional {\n  String goodbye(String message);\n}</code></pre>\n<p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。<br>\n函数式接口可以被隐式转换为 lambda 表达式。所以上面接口的实现方式可用Lambda表达式简写为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Functional fx = message -&gt; System.out.println(\"Hello \" + message);\nfx.goodbye(\"world!!!\");</code></pre>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -4.092ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"74.317ex\" height=\"5.789ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 32848 2558.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"OP\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1344,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1813,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2282,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2811,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3288,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3754,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4809.8,0)\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5865.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6510.6,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7000.6,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7469.6,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7830.6,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8296.6,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9174.6,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(9619.2,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10104.2,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10676.2,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11037.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11481.9,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11984.9,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12435.9,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12780.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13380.9,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13741.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(14039.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14639.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(15028.9,0)\"><g data-mml-node=\"mo\"><g data-c=\"2033\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" transform=\"translate(275,0)\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(15578.9,0)\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(16466.9,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(16932.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(17230.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(17528.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(18013.9,0)\"><g data-mml-node=\"mo\"><g data-c=\"2033\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" transform=\"translate(275,0)\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18786.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(19786.3,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(20664.3,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(21130.3,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(21599.3,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(22068.3,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(22597.3,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(23074.3,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(23540.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-675)\"><path data-c=\"E152\" d=\"M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z\"/><path data-c=\"E153\" d=\"M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z\" transform=\"translate(23479.3,0)\"/><g data-c=\"E156\" transform=\"translate(11514.7,0)\"><path data-c=\"E151\" d=\"M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z\"/><path data-c=\"E150\" d=\"M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z\" transform=\"translate(450,0)\"/></g><svg width=\"11264.7\" height=\"720\" x=\"350\" y=\"-300\" viewbox=\"2816.2 -300 11264.7 720\"><path data-c=\"E154\" d=\"M-10 0V120H410V0H-10Z\" transform=\"scale(42.243,1)\"/></svg><svg width=\"11264.7\" height=\"720\" x=\"12314.7\" y=\"-300\" viewbox=\"2816.2 -300 11264.7 720\"><path data-c=\"E154\" d=\"M-10 0V120H410V0H-10Z\" transform=\"scale(42.243,1)\"/></svg></g></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(11257.6,-1567.3) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">函</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g></g><g data-mml-node=\"mstyle\" transform=\"translate(23929.3,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"munder\" transform=\"translate(24929.3,0)\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">赋</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-888)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\" transform=\"translate(1000,0)\"/><svg width=\"1100\" height=\"865\" x=\"0\" y=\"-182\" viewbox=\"275 -182 1100 865\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\" transform=\"scale(2.121,1)\"/></svg></g></g><g data-mml-node=\"mstyle\" transform=\"translate(26929.3,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"mi\" transform=\"translate(27929.3,0)\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(28479.3,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(29051.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(29496,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(29973,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(30458,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(30943,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(31463,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(31892,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(32382,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g></g></g></svg></mjx-container><br>\n并通过<code>fx.goodbye(\"world!!!\")</code>调用。这也就是必须有且仅有一个抽象方法否则并不知道赋值给哪一个方法。</p>\n<h2 id=\"四大函数式接口\">四大函数式接口</h2>\n<p>我们在使用函数式接口时，并不需要总是创建一个函数式接口。因为<code>JAVA8</code>已经为我们提供了常用的函数式接口。</p>\n<table>\n<thead>\n<tr>\n<th>函数式接口名</th>\n<th>方法名</th>\n<th>作用</th>\n<th>特征</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Supplier</code></td>\n<td><code>get()</code> <br> <code>getAs</code>类型()</td>\n<td>生产者函数式接口</td>\n<td>无参数 <br> 有返回值</td>\n<td><code>Supplier</code><t> <br> <code>BooleanSupplier</code> <br> <code>IntSupplier</code> <br> <code>LongSupplier</code> <br> <code>DoubleSupplier</code></t></td>\n</tr>\n<tr>\n<td><code>Consumer</code></td>\n<td><code>accept()</code></td>\n<td>消费者函数式接口</td>\n<td>单个参数 <br> 无返回值</td>\n<td><code>Consumer</code> <br> <code>IntConsumer</code> <br> <code>LongConsumer</code> <br> <code>DoubleConsumer</code></td>\n</tr>\n<tr>\n<td><code>Predicate</code></td>\n<td><code>test()</code></td>\n<td>断言函数式接口</td>\n<td>2 参数 <br> 返回布尔型</td>\n<td><code>Predicate</code> <br> <code>BiPredicate</code> <br> <code>IntPredicate</code> <br> <code>LongPredicate</code> <br> <code>DoublePredicate</code></td>\n</tr>\n<tr>\n<td><code>Function</code></td>\n<td><code>apply()</code> <br> <code>applyAs</code>类型()</td>\n<td>功能函数式接口</td>\n<td>单个参数 <br> 有返回值</td>\n<td><code>Function</code> <br> <code>IntFunction</code> <br> <code>LongFunction</code> <br> <code>DoubleFunction</code> <br> <code>ToIntFunction</code> <br> <code>ToLongFunction</code> <br> <code>ToDoubleFunction</code> <br> <code>IntToLongFunction</code> <br> <code>IntToDoubleFunction</code> <br> <code>LongToIntFunction</code> <br> <code>LongToDoubleFunction</code> <br> <code>DoubleToIntFunction</code> <br> <code>DoubleToLongFunction</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"supplier-T\">supplier&lt;T&gt;</h3>\n<p>生产者函数式接口,无参数，返回一个<code>T</code>类型结果。如果返回类型是基本类型可以使用BooleanSupplier、IntSupplier、LongSupplier、DoubleSupplier</p>\n<p>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Supplier&lt;String&gt; supplier = String::new; \nSupplier&lt;Emp&gt; supplierEmp = Emp::new;\nEmp emp = supplierEmp.get();\nemp.setName(\"dd\");\n\nSystem.out.println(supplier.get()); // \"\"\nSystem.out.println(emp.getName());  // dd</code></pre>\n<h3 id=\"Consumer-T\">Consumer&lt;T&gt;</h3>\n<p>接受一个<code>T</code>类型输入参数并且无返回。如果<code>T</code>是基本类型可以使用<code>IntConsumer</code>、<code>LongConsumer</code>、<code>DoubleConsumer</code>,如果需要输入两个参数使用<code>BiConsumer</code>,如果有一个类型是<code>Obj</code>,一个类型是基本类型可以使用<code>ObjIntConsumer</code>、<code>ObjLongConsumer</code>、<code>ObjDoubleConsumer</code></p>\n<p>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Emp emp = new Emp();\nConsumer&lt;Emp&gt; nameConsumer = emp -&gt; System.out.println(emp.getName());  \nnameConsumer.accept(emp); // 打印学生名字</code></pre>\n<h3 id=\"Predicate-T\">Predicate&lt;T&gt;</h3>\n<p>接受一个<code>T</code>类型输入参数并且返回布尔值。如果<code>T</code>是基本类型可以使用<code>IntPredicate</code>、<code>LongPredicate</code>、<code>DoublePredicate</code>,如果需要输入两个参数使用<code>BiPredicate</code>。</p>\n<p>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Predicate&lt;Integer&gt; predicate = t -&gt; t &gt; 5;\nSystem.out.println(predicate.test(6)); // true </code></pre>\n<h3 id=\"Function-T-R\">Function&lt;T,R&gt;</h3>\n<p>接受一个<code>T</code>类型输入参数返回一个<code>R</code>类型参数。如果<code>T</code>是基本类型可以使用<br>\n<code>IntFunction</code>、<code>LongFunction</code>、<code>DoubleFunction</code>,如果<code>R</code>是基本类型<code>ToIntFunction</code>、<code>ToLongFunction</code>、<code>ToDoubleFunction</code>,如果<code>T</code>和<code>R</code>都是基本类型可以使用<code>IntToLongFunction</code>、<code>IntToDoubleFunction</code>、<code>LongToIntFunction</code>、<code>LongToDoubleFunction</code>、<code>DoubleToIntFunction</code>、<code>DoubleToLongFunction</code>,<br>\n如果需要传入两个参数可以使用<code>BiFunction</code>,要是<code>BiFunction</code>返回类型是基本类型可以使用<code>ToIntBiFunction</code>、<code>ToLongBiFunction</code>、<code>ToDoubleBiFunction</code>。</p>\n<p>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Function&lt;Integer,Integer&gt; fuc = t -&gt; t - 1;\nSystem.out.println(fuc.apply(6)); // 5 </code></pre>\n<h3 id=\"其它函数式接口\">其它函数式接口</h3>\n<table>\n<thead>\n<tr>\n<th>函数式接口名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Runnable</code></td>\n<td>不返回结果的线程</td>\n</tr>\n<tr>\n<td><code>Callable</code></td>\n<td>返回结果的线程</td>\n</tr>\n<tr>\n<td><code>UnaryOperator</code></td>\n<td>表示对同一类型的两个操作数的操作，产生与操作数相同类型的结果。</td>\n</tr>\n<tr>\n<td><code>BinaryOperator</code></td>\n<td>表示对单个操作数产生与其操作数相同类型的结果的操作。</td>\n</tr>\n<tr>\n<td><code>Comparator</code></td>\n<td>对同类型的两个参数作比较</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"函数组合\">函数组合</h2>\n<p>函数组合（Function Composition）意为“多个函数组合成新函数”。它通常是函数式编程的基本组成部分。</p>\n<table>\n<thead>\n<tr>\n<th>组合方法</th>\n<th>作用</th>\n<th>支持接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>andThen(argument)</code></td>\n<td>执行原操作,再执行参数操作</td>\n<td><code>Function</code> <br> <code>BiFunction</code> <br> <code>Consumer</code> <br> <code>BiConsumer</code> <br> <code>IntConsumer</code> <br> <code>LongConsumer</code> <br> <code>DoubleConsumer</code> <br> <code>UnaryOperator</code> <br> <code>IntUnaryOperator</code> <br> <code>LongUnaryOperator</code> <br> <code>DoubleUnaryOperator</code> <br> <code>BinaryOperator</code></td>\n</tr>\n<tr>\n<td><code>compose(argument)</code></td>\n<td>执行参数操作,再执行原操作</td>\n<td><code>Function</code> <br> <code>UnaryOperator</code> <br> <code>IntUnaryOperator</code> <br> <code>LongUnaryOperator</code> <br> <code>DoubleUnaryOperator</code></td>\n</tr>\n<tr>\n<td><code>and(argument)</code></td>\n<td>原<code>Predicate</code>函数式接口和参数<code>Predicate</code>函数式接口的短路逻辑与</td>\n<td><code>Predicate</code> <br> <code>BiPredicate</code> <br> <code>IntPredicate</code> <br> <code>LongPredicate</code> <br> <code>DoublePredicate</code></td>\n</tr>\n<tr>\n<td><code>or(argument)</code></td>\n<td>原<code>Predicate</code>函数式接口和参数<code>Predicate</code>函数式接口的短路逻辑或</td>\n<td><code>Predicate</code> <br> <code>BiPredicate</code> <br> <code>IntPredicate</code> <br> <code>LongPredicate</code> <br> <code>DoublePredicate</code></td>\n</tr>\n<tr>\n<td><code>negate()</code></td>\n<td>该<code>Predicate</code>函数式接口的逻辑非</td>\n<td><code>Predicate</code> <br> <code>BiPredicate</code> <br> <code>IntPredicate</code> <br> <code>LongPredicate</code> <br> <code>DoublePredicate</code></td>\n</tr>\n</tbody>\n</table>\n<p>下例使用了<code>Function</code>里的<code>compose()</code>和<code>andThen()</code>。代码示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// functional/FunctionComposition.java\nimport java.util.function.*;\npublic class FunctionComposition {\n  static Function&lt;String, String&gt;\n    f1 = s -&gt; {\n      System.out.println(s);\n      return s.replace('A', '_');\n    },\n    f2 = s -&gt; s.substring(3),\n    f3 = s -&gt; s.toLowerCase(),\n    f4 = f1.compose(f2).andThen(f3);\n  public static void main(String[] args) {\n    System.out.println(\n      f4.apply(\"GO AFTER ALL AMBULANCES\"));\n  }\n}</code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">AFTER ALL AMBULANCES\n_fter _ll _mbul_nces</code></pre>\n<p>这里我们重点看正在创建的新函数<code>f4</code>。它调用<code>apply()</code>的方式与<code>Function</code>函数式接口几乎无异。<code>f4</code>组合后的新函数,<code>compose(f2)</code>表示<code>f2</code>的调用发生在<code>f1</code>之前,所以当<code>f1</code>获得字符串时，它已经被<code>f2</code>剥离了前三个字符。</p>\n<p>下例是Predicate的逻辑运算演示。代码示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// functional/PredicateComposition.java\nimport java.util.function.*;\nimport java.util.stream.*;\npublic class PredicateComposition {\n  static Predicate&lt;String&gt;\n    p1 = s -&gt; s.contains(\"bar\"),\n    p2 = s -&gt; s.length() &lt; 5,\n    p3 = s -&gt; s.contains(\"foo\"),\n    p4 = p1.negate().and(p2).or(p3);\n  public static void main(String[] args) {\n    Stream.of(\"bar\", \"foobar\", \"foobaz\", \"fongopuckey\")\n      .filter(p4)\n      .forEach(System.out::println);\n  }\n}</code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">foobar\nfoobaz</code></pre>\n<p><code>p4</code>是由<code>p1</code>、<code>p2</code>、<code>p3</code>组成,其判断逻辑是：如果字符串中不包含<code>bar</code>且长度小于5，或者它包含<code>foo</code>，则结果为<code>true</code>。<br>\n正因它产生如此清晰的语法，我在主方法中采用了一些小技巧，并借用了<code>Java Stream</code>。首先，我创建了一个字符串对象的流，然后将每个对象传递给<code>filter()</code>操作。<code>filter()</code>使用<code>p4</code>的谓词来过滤。最后我们使用<code>forEach()</code>将<code>println</code>方法引用应用在每个留存的对象上。</p>\n<h2 id=\"柯里化和部分求值\">柯里化和部分求值</h2>\n<p>将一个多参数的函数，转换为一系列单参数函数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// functional/CurryingAndPartials.java\nimport java.util.function.*;\npublic class CurryingAndPartials {\n   // 未柯里化:\n   static String uncurried(String a, String b) {\n      return a + b;\n   }\n   public static void main(String[] args) {\n      // 柯里化的函数:\n      Function&lt;String, Function&lt;String, String&gt;&gt; sum =\n         a -&gt; b -&gt; a + b; // [1]\n      System.out.println(uncurried(\"Hi \", \"Ho\"));\n      Function&lt;String, String&gt;\n        hi = sum.apply(\"Hi \"); // [2]\n      System.out.println(hi.apply(\"Ho\"));\n      // 部分应用:\n      Function&lt;String, String&gt; sumHi =\n        sum.apply(\"Hup \");\n      System.out.println(sumHi.apply(\"Ho\"));\n      System.out.println(sumHi.apply(\"Hey\"));\n   }\n}</code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Hi Ho\nHi Ho\nHup Ho\nHup Hey</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这一连串的箭头很巧妙。注意，在函数接口声明中，第二个参数是另一个函数。<br><br>\n柯里化的目的是能够通过提供单个参数来创建一个新函数，所以现在有了一个\"带参函数\"和剩下的\"自由函数\"(<code>free argument</code>)。实际上，你从一个双参数函数开始，最后得到一个单参数函数。</p></blockquote>\n<p>我们可以通过继续添加层级来柯里化一个三参数函数:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// functional/Curry3Args.java\nimport java.util.function.*;\npublic class Curry3Args {\n   public static void main(String[] args) {\n      Function&lt;String,\n        Function&lt;String,\n          Function&lt;String, String&gt;&gt;&gt; sum =\n            a -&gt; b -&gt; c -&gt; a + b + c;\n      Function&lt;String,\n        Function&lt;String, String&gt;&gt; hi =\n          sum.apply(\"Hi \");\n      Function&lt;String, String&gt; ho =\n        hi.apply(\"Ho \");\n      System.out.println(ho.apply(\"Hup\"));\n   }\n}</code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Hi Ho Hup</code></pre>\n<p>对于每一级的箭头级联(<code>Arrow-cascading</code>),你都会在类型声明周围包裹另一个<code>Function</code>。<br>\n处理基本类型和装箱时,请使用适当的函数式接口：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// functional/CurriedIntAdd.java\nimport java.util.function.*;\npublic class CurriedIntAdd {\n  public static void main(String[] args) {\n    IntFunction&lt;IntUnaryOperator&gt;\n      curriedIntAdd = a -&gt; b -&gt; a + b;\n    IntUnaryOperator add4 = curriedIntAdd.apply(4);\n    System.out.println(add4.applyAsInt(5));\n      }\n}</code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">9</code></pre>\n<h2 id=\"总结\">总结</h2>\n<p>在绝大多数多数的程序编写中,<code>Lambda</code>表达式和方法引用并配合<code>Java Stream</code>编程的方式的应用较多，但是函数式接口和柯里化的应用较少。个人觉得一方便绝大多数的开发还是CRUD和数据的梳理，另一方面只有在涉及到架构时或者编写通用工具方法时才有可能使用到函数式接口和柯里化。开发者在使用函数式接口和柯里化时需要从面向对象的思考方式做出部分的转变，以适应函数式编程。而且Java已经有了这么多年的历史，即使不使用函数式接口和柯里化也有成熟的解决方式，而市面上也并未有统一、成熟、全面的关于函数式接口和柯里化在Java开发中的规范要求去替代过去的方式。</p>\n","feature":true,"text":"引言 什么是函数式编程，即可以把方法当做参数或者返回值传递或引用。在JavaScript中函数式编程已经很常见，但是Java Function是不能作为参数引用，为此Java 8中提出了三个概念 Lambda 表达式，也可以称为闭包，但我更愿意称为定义函数的简写表达式 方法引用，...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/categories/函数式编程.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">Lambda 表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">Lambda表达式的基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">变量作用域</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">方法引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">方法引用的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">构造器的引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">静态方法的引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%AE%9A%E7%B1%BB%E7%9A%84%E4%BB%BB%E6%84%8F%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">特定类的任意对象的方法引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%AE%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">特定对象的方法引用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">函数式接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">四大函数式接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#supplier-T\"><span class=\"toc-text\">supplier&lt;T&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Consumer-T\"><span class=\"toc-text\">Consumer&lt;T&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Predicate-T\"><span class=\"toc-text\">Predicate&lt;T&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Function-T-R\"><span class=\"toc-text\">Function&lt;T,R&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">其它函数式接口</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88\"><span class=\"toc-text\">函数组合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%AF%E9%87%8C%E5%8C%96%E5%92%8C%E9%83%A8%E5%88%86%E6%B1%82%E5%80%BC\"><span class=\"toc-text\">柯里化和部分求值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Lombok的使用一进阶篇","uid":"6a8b4d4d5ad2121dc1df69e7c613a802","slug":"Lombok的使用—进阶篇","date":"2022-05-25T15:30:06.000Z","updated":"2022-05-31T12:04:36.553Z","comments":true,"path":"api/articles/Lombok的使用—进阶篇.json","keywords":null,"cover":"/logo/Lombok的使用进阶篇.jpg","text":"进阶注解解析 @SuperBuilder(实验性功能) 是一个帮助类生成复杂的构建器 API。将循允许我们使用以下的方式去实例化对象，但是对继承的类的属性不会忽略,但是超类也必须使用此注解。 使用方式可参照@Builder @Jacksonized(实验性功能) 此注解是@Bui...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true}}