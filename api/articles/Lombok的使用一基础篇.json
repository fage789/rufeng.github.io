{"title":"Lombok的使用一基础篇","uid":"ad1f662ab87a679b9b7a6abe69e2649c","slug":"Lombok的使用一基础篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T13:51:43.747Z","comments":true,"path":"api/articles/Lombok的使用一基础篇.json","keywords":null,"cover":"/logo/ba41a32b219e4b40ad055bbb52935896.jpg","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p><code>Lombok</code>是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码</p>\n<h2 id=\"常用注解解析\"><a href=\"#常用注解解析\" class=\"headerlink\" title=\"常用注解解析\"></a>常用注解解析</h2><h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"@Data\"></a>@Data</h3><p><code>@Data</code>是一个快捷注解，包含<code>@Getter</code>,<code>@Setter</code>,<code>@ToString</code>,<code>@EqualsAndHashCode</code> and <code>@RequiredArgsConstructor</code>注解。当<code>@Data</code>设置于类上时，将自动生成<code>Getter</code>、<code>Setter</code>、<code>ToString</code>、<code>Equals</code>、<code>HashCode</code>方法和默认构造器。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Data;\n\n@Data\npublic class DataExample &#123;\n    private String name;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class DataExample &#123;\n    public String name;\n\n    public DataExample() &#123;\n    &#125;\n\n    public String getName() &#123;\n        return this.name;\n    &#125;\n\n    public void setName(final String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public boolean equals(final Object o) &#123;\n        if (o &#x3D;&#x3D; this) &#123;\n            return true;\n        &#125; else if (!(o instanceof DataExample)) &#123;\n            return false;\n        &#125; else &#123;\n            DataExample other &#x3D; (DataExample)o;\n            if (!other.canEqual(this)) &#123;\n                return false;\n            &#125; else &#123;\n                Object this$name &#x3D; this.getName();\n                Object other$name &#x3D; other.getName();\n                if (this$name &#x3D;&#x3D; null) &#123;\n                    if (other$name !&#x3D; null) &#123;\n                        return false;\n                    &#125;\n                &#125; else if (!this$name.equals(other$name)) &#123;\n                    return false;\n                &#125;\n\n                return true;\n            &#125;\n        &#125;\n    &#125;\n\n    protected boolean canEqual(final Object other) &#123;\n        return other instanceof DataExample;\n    &#125;\n\n    public int hashCode() &#123;\n        int PRIME &#x3D; true;\n        int result &#x3D; 1;\n        Object $name &#x3D; this.getName();\n        int result &#x3D; result * 59 + ($name &#x3D;&#x3D; null ? 43 : $name.hashCode());\n        return result;\n    &#125;\n\n    public String toString() &#123;\n        return &quot;DataExample(name&#x3D;&quot; + this.getName() + &quot;)&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"Getter-and-Setter\"><a href=\"#Getter-and-Setter\" class=\"headerlink\" title=\"@Getter and @Setter\"></a>@Getter and @Setter</h3><p>当为某一字段设置<code>@Getter</code>、<code>@Setter</code>注解时将自动生成此字段的<code>Getter</code>、<code>Setter</code>方法。当为某实体类设置<code>@Getter</code>、<code>@Setter</code>注解时，相当于为类中所有非静态字段设置<code>@Getter</code>、<code>@Setter</code>注解。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class GetterSetterExample &#123;\n    private int age ;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class GetterSetterExample &#123;\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age &#x3D; age;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor构造器注解\"><a href=\"#NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor构造器注解\" class=\"headerlink\" title=\"@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor构造器注解\"></a>@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor构造器注解</h3><p><code>@NoArgsConstructor</code> 将生成一个没有参数的构造函数，如果有<code>final</code>字段需使用<code>@NoArgsConstructor(force = true)</code>初始化<br><code>@AllArgsConstructor</code> 为类中的每个字段生成一个带有 1 个参数的构造函数。标注<code>@NonNul</code>l参数会进行空检查。<br><code>@RequiredArgsConstructor</code> 生成构造包含所有必须字段的参数，包括含<code>@NotNull</code>注解的字段并做空检查，和<code>final</code>修饰且未初始化的字段。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\nimport lombok.AccessLevel;\nimport lombok.RequiredArgsConstructor;\nimport lombok.AllArgsConstructor;\nimport lombok.NonNull;\n\n@RequiredArgsConstructor(staticName &#x3D; &quot;of&quot;)\n@AllArgsConstructor(access &#x3D; AccessLevel.PROTECTED)\npublic class ConstructorExample&lt;T&gt; &#123;\n  private int x, y;\n  @NonNull private T description;\n  \n  @NoArgsConstructor\n  public static class NoArgsExample &#123;\n    @NonNull private String field;\n  &#125;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConstructorExample&lt;T&gt; &#123;\n  private int x, y;\n  @NonNull private T description;\n  \n  private ConstructorExample(T description) &#123;\n    if (description &#x3D;&#x3D; null) throw new NullPointerException(&quot;description&quot;);\n    this.description &#x3D; description;\n  &#125;\n  \n  public static &lt;T&gt; ConstructorExample&lt;T&gt; of(T description) &#123;\n    return new ConstructorExample&lt;T&gt;(description);\n  &#125;\n  \n  @java.beans.ConstructorProperties(&#123;&quot;x&quot;, &quot;y&quot;, &quot;description&quot;&#125;)\n  protected ConstructorExample(int x, int y, T description) &#123;\n    if (description &#x3D;&#x3D; null) throw new NullPointerException(&quot;description&quot;);\n    this.x &#x3D; x;\n    this.y &#x3D; y;\n    this.description &#x3D; description;\n  &#125;\n  \n  public static class NoArgsExample &#123;\n    @NonNull private String field;\n    \n    public NoArgsExample() &#123;\n    &#125;\n  &#125;\n&#125;</code></pre>\n<h3 id=\"EqualsAndHashCode\"><a href=\"#EqualsAndHashCode\" class=\"headerlink\" title=\"@EqualsAndHashCode\"></a>@EqualsAndHashCode</h3><p>任何类定义都可以用注释<code>@EqualsAndHashCode</code>来让<code>Lombok</code>生成<code>equals(Object other)</code>和<code>hashCode()</code>方法的实现。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.EqualsAndHashCode;\n\n@EqualsAndHashCode\npublic class EqualsAndHashCodeExample &#123;\n  private transient int transientVar &#x3D; 10;\n  private String name;\n  private double score;\n  @EqualsAndHashCode.Exclude private Shape shape &#x3D; new Square(5, 10);\n  private String[] tags;\n  @EqualsAndHashCode.Exclude private int id;\n  \n  public String getName() &#123;\n    return this.name;\n  &#125;\n  \n  @EqualsAndHashCode(callSuper&#x3D;true)\n  public static class Square extends Shape &#123;\n    private final int width, height;\n    \n    public Square(int width, int height) &#123;\n      this.width &#x3D; width;\n      this.height &#x3D; height;\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Arrays;\n\npublic class EqualsAndHashCodeExample &#123;\n  private transient int transientVar &#x3D; 10;\n  private String name;\n  private double score;\n  private Shape shape &#x3D; new Square(5, 10);\n  private String[] tags;\n  private int id;\n  \n  public String getName() &#123;\n    return this.name;\n  &#125;\n  \n  @Override public boolean equals(Object o) &#123;\n    if (o &#x3D;&#x3D; this) return true;\n    if (!(o instanceof EqualsAndHashCodeExample)) return false;\n    EqualsAndHashCodeExample other &#x3D; (EqualsAndHashCodeExample) o;\n    if (!other.canEqual((Object)this)) return false;\n    if (this.getName() &#x3D;&#x3D; null ? other.getName() !&#x3D; null : !this.getName().equals(other.getName())) return false;\n    if (Double.compare(this.score, other.score) !&#x3D; 0) return false;\n    if (!Arrays.deepEquals(this.tags, other.tags)) return false;\n    return true;\n  &#125;\n  \n  @Override public int hashCode() &#123;\n    final int PRIME &#x3D; 59;\n    int result &#x3D; 1;\n    final long temp1 &#x3D; Double.doubleToLongBits(this.score);\n    result &#x3D; (result*PRIME) + (this.name &#x3D;&#x3D; null ? 43 : this.name.hashCode());\n    result &#x3D; (result*PRIME) + (int)(temp1 ^ (temp1 &gt;&gt;&gt; 32));\n    result &#x3D; (result*PRIME) + Arrays.deepHashCode(this.tags);\n    return result;\n  &#125;\n  \n  protected boolean canEqual(Object other) &#123;\n    return other instanceof EqualsAndHashCodeExample;\n  &#125;\n  \n  public static class Square extends Shape &#123;\n    private final int width, height;\n    \n    public Square(int width, int height) &#123;\n      this.width &#x3D; width;\n      this.height &#x3D; height;\n    &#125;\n    \n    @Override public boolean equals(Object o) &#123;\n      if (o &#x3D;&#x3D; this) return true;\n      if (!(o instanceof Square)) return false;\n      Square other &#x3D; (Square) o;\n      if (!other.canEqual((Object)this)) return false;\n      if (!super.equals(o)) return false;\n      if (this.width !&#x3D; other.width) return false;\n      if (this.height !&#x3D; other.height) return false;\n      return true;\n    &#125;\n    \n    @Override public int hashCode() &#123;\n      final int PRIME &#x3D; 59;\n      int result &#x3D; 1;\n      result &#x3D; (result*PRIME) + super.hashCode();\n      result &#x3D; (result*PRIME) + this.width;\n      result &#x3D; (result*PRIME) + this.height;\n      return result;\n    &#125;\n    \n    protected boolean canEqual(Object other) &#123;\n      return other instanceof Square;\n    &#125;\n  &#125;\n&#125;</code></pre>\n<h3 id=\"NonNull\"><a href=\"#NonNull\" class=\"headerlink\" title=\"@NonNull\"></a>@NonNull</h3><p>您可以<code>@NonNull</code>在字段、方法、构造函数的参数上使用。这将导致<code>Lombok</code>为您生成一个空检查语句。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.NonNull;\n\npublic class NonNullExample extends Something &#123;\n  private String name;\n  \n  public NonNullExample(@NonNull Person person) &#123;\n    super(&quot;Hello&quot;);\n    this.name &#x3D; person.getName();\n  &#125;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.NonNull;\n\npublic class NonNullExample extends Something &#123;\n  private String name;\n  \n  public NonNullExample(@NonNull Person person) &#123;\n    super(&quot;Hello&quot;);\n    if (person &#x3D;&#x3D; null) &#123;\n      throw new NullPointerException(&quot;person is marked non-null but is null&quot;);\n    &#125;\n    this.name &#x3D; person.getName();\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"@Log\"></a>@Log</h3><p><code>Lombok</code>里关于<code>@Log</code>添加了多种变体，无论使用哪个，都将生成一个静态的<code>final log</code>字段，按照你使用的日志框架的通常规定的方式进行初始化，然后你可以使用它来编写日志语句。变体有<code>@CommonsLog</code>、<code>@Flogger</code>、<code>@JBossLog</code>、<code>@Log</code>、<code>@Log4j</code>、<code>@Log4j2</code>、<code>@Slf4j</code>、<code>@XSlf4j</code>、<code>@CustomLog</code>。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.extern.java.Log;\nimport lombok.extern.slf4j.Slf4j;\n\n@Log\npublic class LogExample &#123;\n  \n  public static void main(String... args) &#123;\n    log.severe(&quot;Something&#39;s wrong here&quot;);\n  &#125;\n&#125;\n\n@Slf4j\npublic class LogExampleOther &#123;\n  \n  public static void main(String... args) &#123;\n    log.error(&quot;Something else is wrong here&quot;);\n  &#125;\n&#125;\n\n@CommonsLog(topic&#x3D;&quot;CounterLog&quot;)\npublic class LogExampleCategory &#123;\n\n  public static void main(String... args) &#123;\n    log.error(&quot;Calling the &#39;CounterLog&#39; with a message&quot;);\n  &#125;\n&#125;</code></pre>\n<p>编译后的实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class LogExample &#123;\n  private static final java.util.logging.Logger log &#x3D; java.util.logging.Logger.getLogger(LogExample.class.getName());\n  \n  public static void main(String... args) &#123;\n    log.severe(&quot;Something&#39;s wrong here&quot;);\n  &#125;\n&#125;\n\npublic class LogExampleOther &#123;\n  private static final org.slf4j.Logger log &#x3D; org.slf4j.LoggerFactory.getLogger(LogExampleOther.class);\n  \n  public static void main(String... args) &#123;\n    log.error(&quot;Something else is wrong here&quot;);\n  &#125;\n&#125;\n\npublic class LogExampleCategory &#123;\n  private static final org.apache.commons.logging.Log log &#x3D; org.apache.commons.logging.LogFactory.getLog(&quot;CounterLog&quot;);\n\n  public static void main(String... args) &#123;\n    log.error(&quot;Calling the &#39;CounterLog&#39; with a message&quot;);\n  &#125;\n&#125;</code></pre>\n","feature":true,"text":"序言Lombok是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码 常用注解解析@Data@Data是一个快捷注解，包含@Getter,@Setter,@ToString,@EqualsAndHashCode and @Re...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":2,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E8%A8%80\"><span class=\"toc-text\">序言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">常用注解解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data\"><span class=\"toc-text\">@Data</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Getter-and-Setter\"><span class=\"toc-text\">@Getter and @Setter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NoArgsConstructor%E3%80%81-RequiredArgsConstructor%E3%80%81-AllArgsConstructor%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor构造器注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EqualsAndHashCode\"><span class=\"toc-text\">@EqualsAndHashCode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NonNull\"><span class=\"toc-text\">@NonNull</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Log\"><span class=\"toc-text\">@Log</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Lombok的使用一中级篇","uid":"f4f9a107b18653850d81e048925a42ea","slug":"Lombok的使用一中级篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T14:11:18.805Z","comments":true,"path":"api/articles/Lombok的使用一中级篇.json","keywords":null,"cover":"/logo/bab9141327ca48e39abef6229b79cf9c.jpg","text":"高级注解解析@Builder是一个帮助类生成复杂的构建器 API。将允许我们使用以下的方式去实例化对象，但是对继承的类的属性会忽略。 Person.builder() .name(&quot;Adam Savage&quot;) .city(&quot;San Francisco...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":2,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true}}