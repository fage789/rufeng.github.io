{"title":"JavaScript代码技巧","uid":"91e0f6f330b5dca608acfed732198bf6","slug":"JavaScript代码技巧","date":"2022-05-16T15:05:06.000Z","updated":"2022-05-25T13:47:15.197Z","comments":true,"path":"api/articles/JavaScript代码技巧.json","keywords":null,"cover":"/logo/97b97ee1173042d5ba667df7ecbe43f6.png","content":"<h2 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h2><h3 id=\"var、const、let的区别\"><a href=\"#var、const、let的区别\" class=\"headerlink\" title=\"var、const、let的区别\"></a>var、const、let的区别</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义常量</td>\n<td></td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>定义变量</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>可被释放</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>可被提升</td>\n<td>√</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>重复定义检查</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>可用于块级作用域</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"多行变量声明的优化\"><a href=\"#多行变量声明的优化\" class=\"headerlink\" title=\"多行变量声明的优化\"></a>多行变量声明的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let name &#x3D; 1;  &#x2F;&#x2F; 名称\nlet age &#x3D; 2;   &#x2F;&#x2F; 年龄\nlet classes &#x3D; 3; &#x2F;&#x2F; 班级\n\n&#x2F;&#x2F; 优化后\n\n&#x2F;&#x2F; 名称 年龄 班级\nlet [name, age, classes] &#x3D; [1, 2, 3];\n\n&#x2F;&#x2F; 特别多的变量,当需要换行时的格式\nlet [name, age, classes]\n    &#x3D; [1, 2, 3];\n\n&#x2F;&#x2F; 此方式默认值的设置,myClasses默认值设置3\nlet [name, age, myClasses]\n    &#x3D; [1, 2, class || 3];\n\n&#x2F;&#x2F; 声明三个都是undefined的变量\nlet [name, age, myClasses] &#x3D; [];\n&#x2F;&#x2F; 声明三个都是空的变量 \nlet [name, age, myClasses] &#x3D; new Array(4).join().split(&#39;,&#39;) || null;\n&#x2F;&#x2F; 声明三个都是0的变量\nlet [name, age, myClasses] &#x3D; new Array(4).join(&#39;0&#39;).split(&#39;&#39;);\n\n&#x2F;&#x2F; 声明三个都是0的变量\nlet [name, age, myClasses] &#x3D; new Array(3).fill(0);\nlet [name, age, myClasses] &#x3D; Array.from(&#123;length: 3&#125;).map(()&#x3D;&gt; 0)\n</code></pre>\n<h3 id=\"数组取值的优化\"><a href=\"#数组取值的优化\" class=\"headerlink\" title=\"数组取值的优化\"></a>数组取值的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let arr &#x3D; [1, 2, 3];\nlet arr1 &#x3D; arr[0];\nlet arr2 &#x3D; arr[1];\nlet arr3 &#x3D; arr[2];\n\n&#x2F;&#x2F; 优化后\nlet arr &#x3D; [1, 2, 3];\nlet [arr1, arr2, arr3] &#x3D; arr;\n</code></pre>\n<h3 id=\"对象取值的优化\"><a href=\"#对象取值的优化\" class=\"headerlink\" title=\"对象取值的优化\"></a>对象取值的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let student &#x3D; &#123;name:1, age:2, classes:3&#125;;\nlet name &#x3D; student.name;   &#x2F;&#x2F; 名称\nlet age &#x3D; student.age;     &#x2F;&#x2F; 年龄\nlet classes &#x3D; student.classes; &#x2F;&#x2F; 班级\n\n&#x2F;&#x2F; 优化后\nlet &#123;name : name, age : age, classes : classes&#125; &#x3D; student;\n&#x2F;&#x2F; 变量与属性名不相同 (key : value) key:JSON对象的属性名 value:变量名\nlet &#123;name : myName, age : myAge, classes : myClasses&#125; &#x3D; student;\n&#x2F;&#x2F; 此种对象的默认值设置仅在等于undefined的时候触发Myclasses &#x3D; 0\nlet &#123;name : myName, age : myAge, classes : myClasses &#x3D; 0&#125; &#x3D; student;\n \nlet &#123;name , age , classes&#125; &#x3D; student;\n</code></pre>\n<h3 id=\"逻辑与-amp-amp-、逻辑或-的使用\"><a href=\"#逻辑与-amp-amp-、逻辑或-的使用\" class=\"headerlink\" title=\"逻辑与 &amp;&amp; 、逻辑或 || 的使用\"></a>逻辑与 &amp;&amp; 、逻辑或 || 的使用</h3><p>在使用之前我们要理解逻辑与和逻辑或的重要特性,短路.<br><strong>逻辑与:</strong> 当前面为假时,则直接返回假,否则返回后面的结果<br><strong>逻辑或:</strong> 当前面为真时,则直接返回真,否则返回后面的结果</p>\n<h4 id=\"默认值的优化\"><a href=\"#默认值的优化\" class=\"headerlink\" title=\"默认值的优化\"></a>默认值的优化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; myName默认值的优化\nlet name &#x3D; 1;\nif (name) &#123;\n    let myName &#x3D; name;\n&#125; else &#123;\n    let myName &#x3D; 2;\n&#125;\n\n&#x2F;&#x2F; 优化后\nlet name &#x3D; 1;\nlet myName &#x3D; name || 2;\n&#x2F;&#x2F; 扩展:我们在函数调用时设置默认值\ngetName(myName || name);\n</code></pre>\n<h4 id=\"单行if语句的优化\"><a href=\"#单行if语句的优化\" class=\"headerlink\" title=\"单行if语句的优化\"></a>单行if语句的优化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 单行if语句的优化\nif(name)&#123; console.log(name)&#125;\n\n&#x2F;&#x2F; 优化后\nname &amp;&amp; console.log(name);\n</code></pre>\n<h3 id=\"取非空对象值的优化\"><a href=\"#取非空对象值的优化\" class=\"headerlink\" title=\"取非空对象值的优化\"></a>取非空对象值的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 取非空JSON值的优化\nlet student &#x3D; null;\nlet student1 &#x3D; &#123;name : 1&#125;;\n\n&#x2F;&#x2F; student与student在代码逻辑中,只有一个有值,且我们要取出这个name,优先取student\nlet name &#x3D; null;\nif (student) &#123;\n    name &#x3D; student.name;\n&#125; else if(student1) &#123;\n    name &#x3D; student1.name;\n&#125;\n\n&#x2F;&#x2F; 优化后\nlet student &#x3D; null;\nlet student1 &#x3D; &#123;name : 1&#125;;\nlet name &#x3D; (student || student1)[&#39;name&#39;];\n&#x2F;&#x2F; 或者\nlet name &#x3D; (student || student1).name;\n</code></pre>\n<h2 id=\"JSON的使用\"><a href=\"#JSON的使用\" class=\"headerlink\" title=\"JSON的使用\"></a>JSON的使用</h2><h3 id=\"JSON声明的优化\"><a href=\"#JSON声明的优化\" class=\"headerlink\" title=\"JSON声明的优化\"></a>JSON声明的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let student &#x3D; &#123;&#125;;\nlet classes &#x3D; 2;\nstudent.name &#x3D; 1;\nstudent.classes &#x3D; classes || 3;\n\n&#x2F;&#x2F; 优化后\nlet classes &#x3D; 2;\nlet student &#x3D; &#123;\n    name : 1,\n    classes : classes || 3,\n&#125;;\n</code></pre>\n<h3 id=\"JSON取值的优化\"><a href=\"#JSON取值的优化\" class=\"headerlink\" title=\"JSON取值的优化\"></a>JSON取值的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let student &#x3D; &#123;\n    name : 1,\n    classes1 : null,\n    classes2 : 3,\n&#125;;\n&#x2F;&#x2F; 当classes1为空时取classes2\nlet classes &#x3D; null;\nif (student.classes1) &#123;\n    classes &#x3D; student.classes1;\n&#125; else &#123;\n    classes &#x3D; student.classes2;\n&#125;\n\n&#x2F;&#x2F; 优化后\nlet classes &#x3D; student.classes1 || student.classes2;\nlet classes &#x3D; student[&quot;classes1&quot;] || student[&#39;classes2&quot;];\n</code></pre>\n<h2 id=\"条件运算符的使用\"><a href=\"#条件运算符的使用\" class=\"headerlink\" title=\"条件运算符的使用\"></a>条件运算符的使用</h2><h3 id=\"if-else-语句的优化\"><a href=\"#if-else-语句的优化\" class=\"headerlink\" title=\"if else 语句的优化\"></a>if else 语句的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let method &#x3D; request.method;\nif (method &#x3D;&#x3D; &#39;GET&#39;) &#123;\n    let name &#x3D; request.getValue(&quot;name&quot;);\n&#125; else &#123;\n    let name &#x3D; request.getValue(&quot;custpage_name&quot;);\n&#125;\n\n&#x2F;&#x2F; 优化后\nlet method &#x3D; request.method;\nlet name &#x3D; request.getValue(method &#x3D;&#x3D; &#39;GET&#39; ? &quot;name&quot; : &quot;custpage_name&quot;);\nlet name &#x3D; method &#x3D;&#x3D; &#39;GET&#39; ? request.getValue(&quot;name&quot;) : request.getValue(&quot;custpage_name&quot;);\n</code></pre>\n<h3 id=\"方法调用的优化\"><a href=\"#方法调用的优化\" class=\"headerlink\" title=\"方法调用的优化\"></a>方法调用的优化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let isUp &#x3D; false;\nif (isUp)&#123;\n    up();\n&#125; else &#123;\n    down();\n&#125;\n\n&#x2F;&#x2F; 优化后\nlet isUp &#x3D; false;\nisUp ? up() : down();\n&#x2F;&#x2F; 或者在函数的返回值使用条件运算符\nfunction jump(isUp)&#123;\n    return isUp ? up() : down();\n&#125;</code></pre>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var form &#x3D; serverWidget.createForm(&#123;\n\t\ttitle: &#39;Thank you for your interest in Wolfe Electronics&#39;,\n\t\thideNavBar: true\n\t&#125;);\nvar htmlHeader &#x3D; form.addField(&#123;\n\t\tid: &#39;custpage_header&#39;,\n\t\ttype: serverWidget.FieldType.INLINEHTML,\n\t\tlabel: &#39; &#39;\n\t&#125;);\nhtmlHeader.updateLayoutType(&#123;\n\t\tlayoutType: serverWidget.FieldLayoutType.OUTSIDEABOVE\n\t&#125;);\nhtmlHeader.updateBreakType(&#123;\n\t\tbreakType: serverWidget.FieldBreakType.STARTROW\n\t&#125;);\nhtmlHeader.defaultValue &#x3D; &#39;&lt;p style&#x3D;\\&#39;font-size:20px\\&#39;&gt;We pride ourselves on providing the best&#39; + &#39; services and customer satisfaction. Please take a moment to fill out our survey.&lt;&#x2F;p&gt;&lt;br&gt;&lt;br&gt;&#39;;\n\n&#x2F;&#x2F; 链式调用\nvar form &#x3D; serverWidget.createForm(&#123;\n\t\ttitle: &#39;Thank you for your interest in Wolfe Electronics&#39;,\n\t\thideNavBar: true\n\t&#125;);\nvar htmlHeader &#x3D; form.addField(&#123;\n\t\tid: &#39;custpage_header&#39;,\n\t\ttype: serverWidget.FieldType.INLINEHTML,\n\t\tlabel: &#39; &#39;\n\t&#125;).updateLayoutType(&#123;\n\t\tlayoutType: serverWidget.FieldLayoutType.OUTSIDEABOVE\n\t&#125;).updateBreakType(&#123;\n\t\tbreakType: serverWidget.FieldBreakType.STARTROW\n\t&#125;).defaultValue &#x3D; &#39;&lt;p style&#x3D;\\&#39;font-size:20px\\&#39;&gt;We pride ourselves on providing the best&#39; + &#39; services and customer satisfaction. Please take a moment to fill out our survey.&lt;&#x2F;p&gt;&lt;br&gt;&lt;br&gt;&#39;;</code></pre>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let n &#x3D; &#39;1&#39;;\nlet b &#x3D; &#39;2&#39;;\nlet s &#x3D; &#39;3&#39;;\nlet y &#x3D; &#39;4&#39;;\n\nlet string &#x3D; n + &quot;-&quot; + b + &quot;-&quot; + s + &quot;-&quot; + y;\nlet string2 &#x3D; n + b + s + y;\n\n&#x2F;&#x2F; 优化后\nlet n &#x3D; &#39;1&#39;;\nlet b &#x3D; &#39;2&#39;;\nlet s &#x3D; &#39;3&#39;;\nlet y &#x3D; &#39;4&#39;;\nlet string &#x3D; [n, b ,s,y].join(&quot;-&quot;);\nlet string2 &#x3D; n.concat(b, s, y);\n\n&#x2F;&#x2F; 字符串拼接其他方式\nlet string &#x3D; &quot;a-b-c-y&quot;;\nstring &#x3D; string.replace(&quot;a&quot;,a).replace(&quot;b&quot;,b).replace(&quot;b&quot;,b).replace(&quot;y&quot;,y);</code></pre>\n<h3 id=\"包含判断\"><a href=\"#包含判断\" class=\"headerlink\" title=\"包含判断\"></a>包含判断</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let a &#x3D; 1;\nif(a &#x3D;&#x3D; 1 || a &#x3D;&#x3D; 2 || a &#x3D;&#x3D; 3)&#123; \n    &#x2F;&#x2F; doSomething\n&#125;\n    \n&#x2F;&#x2F; 优化\nif([1, 2, 3].indexof(a) &gt;&#x3D; 0)&#123; \n    &#x2F;&#x2F; doSomething\n&#125;\n</code></pre>\n<h3 id=\"数组的简写方式\"><a href=\"#数组的简写方式\" class=\"headerlink\" title=\"数组的简写方式\"></a>数组的简写方式</h3><pre class=\"line-numbers language-Javascript\" data-language=\"Javascript\"><code class=\"language-Javascript\">let a &#x3D; new Array();\n\n&#x2F;&#x2F; 简写\nlet a &#x3D; [];</code></pre>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p><strong>箭头函数</strong>就是<strong>函数</strong>的简写方式<br><pre class=\"line-numbers language-Javascript\" data-language=\"Javascript\"><code class=\"language-Javascript\">function doSomething(a, b)&#123;\n    return a + b;\n&#125;\n\n&#x2F;&#x2F; 以下仅仅@NApiVersion 2.0以上可以使用\n&#x2F;&#x2F; 简写\nlet doSomething &#x3D; (a, b) &#x3D;&gt; &#123;return a + b;&#125;;\n\n&#x2F;&#x2F; 箭头函数的两个省略\n&#x2F;&#x2F; 1.当箭头左边只有一个参数时,可省略()\na &#x3D;&gt; &#123;return a + 1;&#125;;\n&#x2F;&#x2F; 2.当箭头右边只有一句话时,可省略&#123;&#125;与return\n(a, b) &#x3D;&gt; a + b;</code></pre></p>\n<h3 id=\"对象的keys、values的使用\"><a href=\"#对象的keys、values的使用\" class=\"headerlink\" title=\"对象的keys、values的使用\"></a>对象的keys、values的使用</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let student &#x3D; &#123;\n    name : 1,\n    classes : 3,\n&#125;;\n\n&#x2F;&#x2F; 获取对象的Keys\nObject.keys(student);   &#x2F;&#x2F; expected output: [&quot;name&quot;, &quot;classes&quot;]\n&#x2F;&#x2F; 获取对象的values\nObject.values(student); &#x2F;&#x2F; expected output: [1, 3]\n\n&#x2F;&#x2F; 判断对象是否具有该属性\nstudent.hasOwnProperty(&quot;classes&quot;);\nObject.keys(student).indexof(&quot;name&quot;) &gt;&#x3D; 0;\n</code></pre>\n<h3 id=\"数组的常用函数\"><a href=\"#数组的常用函数\" class=\"headerlink\" title=\"数组的常用函数\"></a>数组的常用函数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> &#x2F;&#x2F; filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 \nconst words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];\nconst result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);\nconsole.log(result);             &#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\n\n&#x2F;&#x2F; find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。\nconst array1 &#x3D; [5, 12, 8, 130, 44];\nconst found &#x3D; array1.find(element &#x3D;&gt; element &gt; 10);\nconsole.log(found);              &#x2F;&#x2F; expected output: 12\n\n&#x2F;&#x2F; forEach() 方法对数组的每个元素执行一次给定的函数。\nconst array1 &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\narray1.forEach(element &#x3D;&gt; console.log(element));\n\n&#x2F;&#x2F; includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。\nconst array1 &#x3D; [1, 2, 3];\nconsole.log(array1.includes(2));   &#x2F;&#x2F; expected output: true\nconst pets &#x3D; [&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;];\nconsole.log(pets.includes(&#39;cat&#39;)); &#x2F;&#x2F; expected output: true\nconsole.log(pets.includes(&#39;at&#39;));  &#x2F;&#x2F; expected output: false\n\n&#x2F;&#x2F; map() 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。\nconst array1 &#x3D; [1, 4, 9, 16];     &#x2F;&#x2F; pass a function to map\nconst map1 &#x3D; array1.map(x &#x3D;&gt; x * 2);\nconsole.log(map1);                &#x2F;&#x2F; expected output: Array [2, 8, 18, 32]\n\n&#x2F;&#x2F; reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\nconst array1 &#x3D; [1, 2, 3, 4];\nconst reducer &#x3D; (accumulator, currentValue) &#x3D;&gt; accumulator + currentValue; \n&#x2F;&#x2F; 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));                                       &#x2F;&#x2F; expected output: 10\n&#x2F;&#x2F; 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));                                    &#x2F;&#x2F; expected output: 15</code></pre>\n<p>这些方法是ES6以上可以使用,但是我们想在ES6以下运用这些方法时,只需按照网址:<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a><br>找到对应函数<br><img src=\"/fage789/rufeng.github.io/fage789/rufeng.github.io/post/JavaScript%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/20220517.jpg\" alt=\"20220517.png\"><br>polyfill复制粘贴就能使用.</p>\n<h3 id=\"字符串常用方法\"><a href=\"#字符串常用方法\" class=\"headerlink\" title=\"字符串常用方法\"></a>字符串常用方法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n&#39;abc&#39;.padEnd(10);          &#x2F;&#x2F; &quot;abc       &quot;\n&#39;abc&#39;.padEnd(10, &quot;foo&quot;);   &#x2F;&#x2F; &quot;abcfoofoof&quot;\n&#39;abc&#39;.padEnd(6, &quot;123456&quot;); &#x2F;&#x2F; &quot;abc123&quot;\n&#39;abc&#39;.padEnd(1);           &#x2F;&#x2F; &quot;abc&quot;\n\n&#x2F;&#x2F; padStart() 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。\n&#39;abc&#39;.padStart(10);         &#x2F;&#x2F; &quot;       abc&quot;\n&#39;abc&#39;.padStart(10, &quot;foo&quot;);  &#x2F;&#x2F; &quot;foofoofabc&quot;\n&#39;abc&#39;.padStart(6,&quot;123465&quot;); &#x2F;&#x2F; &quot;123abc&quot;\n&#39;abc&#39;.padStart(8, &quot;0&quot;);     &#x2F;&#x2F; &quot;00000abc&quot;\n&#39;abc&#39;.padStart(1);          &#x2F;&#x2F; &quot;abc&quot;</code></pre>\n<p>这些方法注意事项同上.</p>\n<h2 id=\"优化的注意事项\"><a href=\"#优化的注意事项\" class=\"headerlink\" title=\"优化的注意事项\"></a>优化的注意事项</h2><p>在优化之前我们要理解为什么要优化代码,所有的优化都是为了<strong>代码的可读性</strong>,但在某些情况下以上的例子<strong>不优化可能比优化的可读性</strong>要好<br>例如 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 声明三个都是空的变量 \nlet name &#x3D; null;    &#x2F;&#x2F; 名称\nlet age &#x3D; null;     &#x2F;&#x2F; 年龄\nlet classes &#x3D; null; &#x2F;&#x2F; 班级\n\n&#x2F;&#x2F; 优化后\nlet [name, age, myClasses] &#x3D; new Array(4).join().split(&#39;,&#39;) || null;</code></pre>\n<p>难道上面name, age, classes的声明方式比下面的优化语句,可读性差吗?并没有,但是当声明10个、20个、30个以上空的变量时,下面的优化语句就比上面的可读性强.<br>当我们发现优化后并没有对可读性有提升时,就没必要优化.不过我们依然需要了解这些优化方式,以免我们需要增加代码可读性的时候,无从下手,或者不理解别人的代码.可读性不强的代码千千万万,优化的方式也多种多样,我们应当不放过自己可读性不强的代码,记住别人好的优化方式.各位还有别的案例或者优化方式,都可以自己更新这个文档,分享出来.</p>\n<h2 id=\"网址的分享\"><a href=\"#网址的分享\" class=\"headerlink\" title=\"网址的分享\"></a>网址的分享</h2><p><strong>Javascript教程:</strong><a href=\"https://wangdoc.com/javascript/index.html\" title=\"Javascript教程：\">https://wangdoc.com/javascript/index.html</a><br><strong>JS编程规范:</strong><a href=\"https://github.com/airbnb/javascript/tree/es5-deprecated/es5\" title=\"JS编程规范\">https://github.com/airbnb/javascript/tree/es5-deprecated/es5</a><br><strong>ECMAScript6入门:</strong><a href=\"https://es6.ruanyifeng.com/?search=%E7%AE%AD%E5%A4%B4&amp;x=0&amp;y=0\" title=\"ECMAScript6入门\">https://es6.ruanyifeng.com/?search=%E7%AE%AD%E5%A4%B4&amp;x=0&amp;y=0</a><br><strong>JavaScript帮助文档:</strong><a href=\"https://es6.ruanyifeng.com/?search=%E7%AE%AD%E5%A4%B4&amp;x=0&amp;y=0\" title=\"JavaScript帮助文**档\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects</a><br><strong>webStorm激活码获取:</strong><a href=\"http://idea.94goo.com/\" title=\"webStrom激活码领取\">http://idea.94goo.com/</a></p>\n","text":"变量的声明var、const、let的区别 表头 var let const 定义常量 √ 定义变量 √ √ 可被释放 √ √ √ 可被提升 √ 重复定义检查 √ √ 可用于块级作用域 √ √ 多行变量声明的优化let name &#x3D; 1; &#x2F;&#x2F; 名称...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">变量的声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#var%E3%80%81const%E3%80%81let%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">var、const、let的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">多行变量声明的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%8F%96%E5%80%BC%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">数组取值的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%8F%96%E5%80%BC%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">对象取值的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E4%B8%8E-amp-amp-%E3%80%81%E9%80%BB%E8%BE%91%E6%88%96-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">逻辑与 &amp;&amp; 、逻辑或 || 的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">默认值的优化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8Cif%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">单行if语句的优化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%96%E9%9D%9E%E7%A9%BA%E5%AF%B9%E8%B1%A1%E5%80%BC%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">取非空对象值的优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">JSON的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON%E5%A3%B0%E6%98%8E%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">JSON声明的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON%E5%8F%96%E5%80%BC%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">JSON取值的优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">条件运算符的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if-else-%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">if else 语句的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">方法调用的优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83\"><span class=\"toc-text\">其它</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">链式调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">字符串拼接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E5%90%AB%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">包含判断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E7%AE%80%E5%86%99%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">数组的简写方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">箭头函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84keys%E3%80%81values%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">对象的keys、values的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">数组的常用函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">字符串常用方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">优化的注意事项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E5%9D%80%E7%9A%84%E5%88%86%E4%BA%AB\"><span class=\"toc-text\">网址的分享</span></a></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{"title":"Lombok的使用一基础篇","uid":"ad1f662ab87a679b9b7a6abe69e2649c","slug":"Lombok的使用一基础篇","date":"2022-05-19T15:30:06.000Z","updated":"2022-05-25T13:51:43.747Z","comments":true,"path":"api/articles/Lombok的使用一基础篇.json","keywords":null,"cover":"/logo/ba41a32b219e4b40ad055bbb52935896.jpg","text":"序言Lombok是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码 常用注解解析@Data@Data是一个快捷注解，包含@Getter,@Setter,@ToString,@EqualsAndHashCode and @Re...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/categories/Lombok.json"}],"tags":[{"name":"Lombok","slug":"Lombok","count":3,"path":"api/tags/Lombok.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}}},"next_post":{}}