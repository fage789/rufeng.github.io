{"title":"Java文档注释","uid":"c89fcf3f80f5323c4d2b7488e0aabc7d","slug":"Java文档注释","date":"2022-06-07T10:30:06.000Z","updated":"2022-06-08T06:06:51.600Z","comments":true,"path":"api/articles/Java文档注释.json","keywords":null,"cover":null,"content":"<h2 id=\"引言-5\">引言</h2>\n<p>Java 支持三种注释方式。前两种分别是 <code>//</code> 和 <code>/* */</code>，第三种被称作说明注释，它以 <code>/**</code> 开始，以 <code>*/</code>结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。</p>\n<h2 id=\"JavaDoc标签\">JavaDoc标签</h2>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@author</td>\n<td>标识一个类的作者</td>\n<td>@author description</td>\n</tr>\n<tr>\n<td>@deprecated</td>\n<td>指名一个过期的类或成员</td>\n<td>@deprecated description</td>\n</tr>\n<tr>\n<td>{@docRoot}</td>\n<td>指明当前文档根目录的路径</td>\n<td>Directory Path</td>\n</tr>\n<tr>\n<td>@exception</td>\n<td>标志一个类抛出的异常</td>\n<td>@exception exception-name explanation</td>\n</tr>\n<tr>\n<td>{@inheritDoc}</td>\n<td>从直接父类继承的注释</td>\n<td>Inherits a comment from the immediate surperclass.</td>\n</tr>\n<tr>\n<td>{@link}</td>\n<td>插入一个到另一个主题的链接</td>\n<td>{@link name text}</td>\n</tr>\n<tr>\n<td>{@linkplain}</td>\n<td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>\n<td>Inserts an in-line link to another topic.</td>\n</tr>\n<tr>\n<td>@param</td>\n<td>说明一个方法的参数</td>\n<td>@param parameter-name explanation</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>说明返回值类型</td>\n<td>@return explanation</td>\n</tr>\n<tr>\n<td>@see</td>\n<td>指定一个到另一个主题的链接</td>\n<td>@see anchor</td>\n</tr>\n<tr>\n<td>@serial</td>\n<td>说明一个序列化属性</td>\n<td>@serial description</td>\n</tr>\n<tr>\n<td>@serialData</td>\n<td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td>\n<td>@serialData description</td>\n</tr>\n<tr>\n<td>@serialField</td>\n<td>说明一个ObjectStreamField组件</td>\n<td>@serialField name type description</td>\n</tr>\n<tr>\n<td>@since</td>\n<td>标记当引入一个特定的变化时</td>\n<td>@since release</td>\n</tr>\n<tr>\n<td>@throws</td>\n<td>和 @exception标签一样.</td>\n<td>The @throws tag has the same meaning as the @exception tag.</td>\n</tr>\n<tr>\n<td>{@value}</td>\n<td>显示常量的值，该常量必须是static属性。</td>\n<td>Displays the value of a constant, which must be a static field.</td>\n</tr>\n<tr>\n<td>@version</td>\n<td>指定类的版本</td>\n<td>@version info</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"内嵌HTML\">内嵌HTML</h3>\n<h4 id=\"pre标签\">pre标签</h4>\n<p><code>&lt;pre&gt;&lt;/pre&gt;</code>标签会保留原文档的格式。当文档需要换行、空格时可以使用此标签</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; javadoc&#x2F;Documentation2.java\n&#x2F;** &lt;pre&gt;\n* System.out.println(new Date());\n* &lt;&#x2F;pre&gt;\n*&#x2F;\npublic class Documentation2 &#123;&#125;</code></pre>\n<h4 id=\"其它HTML标签\">其它HTML标签</h4>\n<p>我们还可以使用<code>HTML</code>来格式化说明中的文字</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; javadoc&#x2F;Documentation3.java\n&#x2F;** You can &lt;em&gt;even&lt;&#x2F;em&gt; insert a list:\n* &lt;ol&gt;\n* &lt;li&gt; Item one\n* &lt;li&gt; Item two\n* &lt;li&gt; Item three\n* &lt;&#x2F;ol&gt;\n*&#x2F;\npublic class Documentation3 &#123;&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请注意，在文档注释中，<code>Javadoc</code>会删除行首的星号以及前导空格。 Javadoc重新格式化了所有内容，使其符合文档的标准外观。不要将<code>&lt;h1&gt;</code> 和<code>&lt;hr&gt;</code> 之<code>&gt;</code>类的标题用作嵌入式<code>HTML</code>，因为<code>Javadoc</code>会插入自己的标题，你插入的标题将对其产生干扰。</p></blockquote>\n<h3 id=\"常用说明注释标签\">常用说明注释标签</h3>\n<h4 id=\"see\">@see</h4>\n<p>这个标签可以将其它的类链接到本文档中。<code>Javadoc</code> 用 <code>@see</code> 标签产生链接到其它类的的HTML。这个标签可以将其它的类链接到本文档中。<code>Javadoc</code> 用 <code>@see</code> 标签产生链接到其它类的的HTML。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; @see必须顶头写,前面不能有任何内容\n@see classname                             &#x2F;&#x2F; 类名\n@see fully-qualified-classname             &#x2F;&#x2F; 完全限定类名\n@see fully-qualified-classname#method-name &#x2F;&#x2F; 完全限定类名#方法名\n&#x2F;&#x2F; 链接跳转地址\n@see &lt;a href&#x3D;&quot;[https:&#x2F;&#x2F;](https:&#x2F;&#x2F;www.runoob.com&#x2F;java&#x2F;java-documentation.html)&quot;&gt;JavaDoc菜鸟教程&lt;&#x2F;a&gt;\n\n&#x2F;**\n * @see Student\n * @see top.join.Student\n * @see Student#getStudentId()\n *&#x2F;\npublic class DataExample()&#123;&#125;</code></pre>\n<h4 id=\"link-与-linkplain\">{@link}与{@linkplain}</h4>\n<p>与<code>@see</code>非常相似，不同之处在于它们可以内联使用(不同顶头写)，并使用标签作为超链接文本。不过<code>&#123;@linkplain&#125;</code>可以自定义显示文本</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; &#123;@link&#125;无需顶头写\n中文&#123;@link classname&#125;中文                      &#x2F;&#x2F; 类名\n&#123;@link fully-qualified-classname&#125;             &#x2F;&#x2F; 完全限定类名\n&#123;@link fully-qualified-classname#method-name&#125; &#x2F;&#x2F; 完全限定类名#方法名\n&#123;@linkplain classname 文本内容&#125;\n&#x2F;&#x2F; 链接跳转地址\n&#123;@link &lt;a href&#x3D;&quot;[https:&#x2F;&#x2F;](https:&#x2F;&#x2F;www.runoob.com&#x2F;java&#x2F;java-documentation.html)&quot;&gt;JavaDoc菜鸟教程&lt;&#x2F;a&gt;&#125;\n\n&#x2F;**\n * 学生&#123;@link Student&#125;\n * &#123;@link top.join.Student&#125;\n * &#123;@link Student#getStudentId()&#125;\n * &#123;@linkplain Student 学生&#125;\n *&#x2F;\npublic class DataExample()&#123;&#125;</code></pre>\n<h4 id=\"version\">@version</h4>\n<p>用于标记当前版本，默认为1.0</p>\n<h4 id=\"since\">@since</h4>\n<p>一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间</p>\n<h4 id=\"throws\">@throws</h4>\n<p>一个方法可以产生许多不同类型的异常，所有这些异常都需要描述。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@throws fully-qualified-class-name description &#x2F;&#x2F; 完全限定类名 异常描述\n\n&#x2F;**\n *\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n *&#x2F;</code></pre>\n<h4 id=\"deprecated\">@deprecated</h4>\n<p>指名一个过期的类或方法,所以一定要说明为什么过期或者用什么方法做替换</p>\n<h4 id=\"value\">{@value}</h4>\n<p>用于标注在常量上，{@value} 用于表示常量的值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * \n * 用在类上需要指定是哪一个常量\n * 默认数量1 &#123;@value QTY_A&#125; \n * 默认数量2 &#123;@value QTY_B&#125;  \n *&#x2F;\npublic class DataExample &#123;\n\n    &#x2F;** 默认数量1 &#123;@value&#125;*&#x2F;\n    public final static Integer QTY_A &#x3D; 1;\n    &#x2F;** 默认数量2 &#123;@value&#125;*&#x2F;\n    public final static Integer QTY_B &#x3D; 1;\n&#125;    </code></pre>\n<h4 id=\"code\">code</h4>\n<p><code>&#123;@code text&#125;</code> 会被解析成<code>&lt;code&gt; text &lt;/code&gt;</code>将文本标记为代码样式的文本，在code内部可以使用 <code>&lt; 、&gt;</code> 等不会被解释成<code>html</code>标签, <code>code</code>标签有自己的样式。一般在<code>Javadoc</code>中只要涉及到类名或者方法名，都需要使用<code>@code</code>进行标记。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Check whether the given &#123;@code CharSequence&#125; contains actual &lt;em&gt;text&lt;&#x2F;em&gt;.\n * &lt;p&gt;More specifically, this method returns &#123;@code true&#125; if the\n * &#123;@code CharSequence&#125; is not &#123;@code null&#125;, its length is greater than\n * 0, and it contains at least one non-whitespace character.\n * &lt;p&gt;&lt;pre class&#x3D;&quot;code&quot;&gt;\n * StringUtils.hasText(null) &#x3D; false\n * StringUtils.hasText(&quot;&quot;) &#x3D; false\n * StringUtils.hasText(&quot; &quot;) &#x3D; false\n * StringUtils.hasText(&quot;12345&quot;) &#x3D; true\n * StringUtils.hasText(&quot; 12345 &quot;) &#x3D; true\n * &lt;&#x2F;pre&gt;\n * @param str the &#123;@code CharSequence&#125; to check (may be &#123;@code null&#125;)\n * @return &#123;@code true&#125; if the &#123;@code CharSequence&#125; is not &#123;@code null&#125;,\n * its length is greater than 0, and it does not contain whitespace only\n * @see Character#isWhitespace\n *&#x2F;\npublic static boolean hasText(@Nullable CharSequence str) &#123;\n\treturn (str !&#x3D; null &amp;&amp; str.length() &gt; 0 &amp;&amp; containsText(str));\n&#125;</code></pre>","text":"引言 Java 支持三种注释方式。前两种分别是 // 和 /* */，第三种被称作说明注释，它以 /** 开始，以 */结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"注释","slug":"java/注释","count":1,"path":"api/categories/java/注释.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"注释","slug":"注释","count":1,"path":"api/tags/注释.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80-5\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaDoc%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">JavaDoc标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%B5%8CHTML\"><span class=\"toc-text\">内嵌HTML</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pre%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">pre标签</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83HTML%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">其它HTML标签</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E8%AF%B4%E6%98%8E%E6%B3%A8%E9%87%8A%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">常用说明注释标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#see\"><span class=\"toc-text\">@see</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#link-%E4%B8%8E-linkplain\"><span class=\"toc-text\">{@link}与{@linkplain}</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#version\"><span class=\"toc-text\">@version</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#since\"><span class=\"toc-text\">@since</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#throws\"><span class=\"toc-text\">@throws</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#deprecated\"><span class=\"toc-text\">@deprecated</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#value\"><span class=\"toc-text\">{@value}</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">code</span></a></li></ol></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{"title":"Java Optional的使用","uid":"135ff637d6fd3260ea45b1df53f84b3e","slug":"Java Optional的使用","date":"2022-06-08T06:30:06.000Z","updated":"2022-06-08T06:58:05.596Z","comments":true,"path":"api/articles/Java Optional的使用.json","keywords":null,"cover":null,"text":"引言 Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerEx...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"Optional","slug":"java/Optional","count":1,"path":"api/categories/java/Optional.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"Optional","slug":"Optional","count":1,"path":"api/tags/Optional.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}}},"next_post":{"title":"Java Stream 流式编程","uid":"21734e1cbf39a356733db81c004c61e6","slug":"Java Stream 流式编程","date":"2022-06-06T07:30:06.000Z","updated":"2022-06-07T10:23:32.433Z","comments":true,"path":"api/articles/Java Stream 流式编程.json","keywords":null,"cover":[],"text":"引言 流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。此外，流还可以透明地并行处理，你无需写任何多线程代码了！ 流创建 通过集合 &#x2F;&#x2F; 创建一个集...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"},{"name":"Stream","slug":"java/Stream","count":1,"path":"api/categories/java/Stream.json"},{"name":"流式编程","slug":"java/Stream/流式编程","count":1,"path":"api/categories/java/Stream/流式编程.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"},{"name":"Stream","slug":"Stream","count":1,"path":"api/tags/Stream.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}}}}