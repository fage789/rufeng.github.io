{"title":"Java文档注释","uid":"c89fcf3f80f5323c4d2b7488e0aabc7d","slug":"Java文档注释","date":"2022-06-07T10:30:06.000Z","updated":"2022-06-07T13:28:57.569Z","comments":true,"path":"api/articles/Java文档注释.json","keywords":null,"cover":null,"content":"<h2 id=\"引言\">引言</h2>\n<p>Java 支持三种注释方式。前两种分别是 // 和 /* <em>/，第三种被称作说明注释，它以 /</em>* 开始，以 */结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。</p>\n<h2 id=\"JavaDoc标签\">JavaDoc标签</h2>\n<p>|标签|描述|示例|<br>\n|–|–|–|–|<br>\n|@author|\t标识一个类的作者|\t@author description|<br>\n|@deprecated|\t指名一个过期的类或成员|\t@deprecated description|<br>\n|{@docRoot}|\t指明当前文档根目录的路径|\tDirectory Path|<br>\n|@exception|\t标志一个类抛出的异常|\t@exception exception-name explanation|<br>\n|{@inheritDoc}|\t从直接父类继承的注释|\tInherits a comment from the immediate surperclass.|<br>\n|{@link}|\t插入一个到另一个主题的链接|\t{@link name text}|<br>\n|{@linkplain}|\t插入一个到另一个主题的链接，但是该链接显示纯文本字体|\tInserts an in-line link to another topic.|<br>\n|@param|\t说明一个方法的参数|\t@param parameter-name explanation|<br>\n|@return|\t说明返回值类型|\t@return explanation|<br>\n|@see|\t指定一个到另一个主题的链接|\t@see anchor|<br>\n|@serial|\t说明一个序列化属性|\t@serial description|<br>\n|@serialData|\t说明通过writeObject( ) 和 writeExternal( )方法写的数据|\t@serialData description|<br>\n|@serialField|\t说明一个ObjectStreamField组件|\t@serialField name type description|<br>\n|@since|\t标记当引入一个特定的变化时|\t@since release|<br>\n|@throws|\t和 @exception标签一样.|\tThe @throws tag has the same meaning as the @exception tag.|<br>\n|{@value}|\t显示常量的值，该常量必须是static属性。|\tDisplays the value of a constant, which must be a static field.|<br>\n|@version|\t指定类的版本|\t@version info|</p>\n<h3 id=\"内嵌HTML\">内嵌HTML</h3>\n<h3 id=\"常用说明注释标签\">常用说明注释标签</h3>\n","feature":true,"text":"引言 Java 支持三种注释方式。前两种分别是 // 和 /* /，第三种被称作说明注释，它以 /* 开始，以 */结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"},{"name":"注释","slug":"java/注释","count":1,"path":"api/categories/java/注释.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"注释","slug":"注释","count":1,"path":"api/tags/注释.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaDoc%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">JavaDoc标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%B5%8CHTML\"><span class=\"toc-text\">内嵌HTML</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E8%AF%B4%E6%98%8E%E6%B3%A8%E9%87%8A%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">常用说明注释标签</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java Stream 流式编程","uid":"21734e1cbf39a356733db81c004c61e6","slug":"Java Stream 流式编程","date":"2022-06-06T07:30:06.000Z","updated":"2022-06-07T10:23:32.433Z","comments":true,"path":"api/articles/Java Stream 流式编程.json","keywords":null,"cover":[],"text":"引言 流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。此外，流还可以透明地并行处理，你无需写任何多线程代码了！ 流创建 通过集合 &#x2F;&#x2F; 创建一个集...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"},{"name":"Stream","slug":"java/Stream","count":1,"path":"api/categories/java/Stream.json"},{"name":"流式编程","slug":"java/Stream/流式编程","count":1,"path":"api/categories/java/Stream/流式编程.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"Stream","slug":"Stream","count":1,"path":"api/tags/Stream.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"程序员的秃头会迟到,但永远不会缺席","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/fgbts"}}}},"feature":true}}